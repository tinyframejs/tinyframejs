"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[8192],{3774:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>r});var a=i(6672);const t={},o=a.createContext(t);function l(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),a.createElement(o.Provider,{value:e},n.children)}},4642:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"getting-started/tutorials/derived-columns","title":"How to create new columns derived from existing columns","description":"Learn how to create and manipulate columns in TinyFrameJS","source":"@site/docs/getting-started/tutorials/derived-columns.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/derived-columns","permalink":"/docs/getting-started/tutorials/derived-columns","draft":false,"unlisted":false,"editUrl":"https://github.com/AlphaQuantJS/tinyframejs/edit/main/docs/getting-started/tutorials/derived-columns.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"derived-columns","title":"How to create new columns derived from existing columns","sidebar_position":5,"description":"Learn how to create and manipulate columns in TinyFrameJS"},"sidebar":"docs","previous":{"title":"How to create plots in TinyFrameJS?","permalink":"/docs/getting-started/tutorials/plotting"},"next":{"title":"How to calculate summary statistics","permalink":"/docs/getting-started/tutorials/statistics"}}');var t=i(3420),o=i(3774);const l={id:"derived-columns",title:"How to create new columns derived from existing columns",sidebar_position:5,description:"Learn how to create and manipulate columns in TinyFrameJS"},r="How to create new columns derived from existing columns",s={},c=[{value:"Adding New Columns",id:"adding-new-columns",level:2},{value:"Using <code>assign()</code>",id:"using-assign",level:3},{value:"Adding a column based on existing columns",id:"adding-a-column-based-on-existing-columns",level:3},{value:"Adding multiple columns at once",id:"adding-multiple-columns-at-once",level:3},{value:"Modifying Existing Columns",id:"modifying-existing-columns",level:2},{value:"Using <code>mutate()</code>",id:"using-mutate",level:3},{value:"Modifying multiple columns",id:"modifying-multiple-columns",level:3},{value:"Applying Functions to Columns",id:"applying-functions-to-columns",level:2},{value:"Using <code>apply()</code>",id:"using-apply",level:3},{value:"Applying a function to multiple columns",id:"applying-a-function-to-multiple-columns",level:3},{value:"Applying a function to the entire DataFrame",id:"applying-a-function-to-the-entire-dataframe",level:3},{value:"Creating Categorical Columns",id:"creating-categorical-columns",level:2},{value:"Using <code>categorize()</code>",id:"using-categorize",level:3},{value:"Using <code>cut()</code>",id:"using-cut",level:3},{value:"Creating One-Hot Encoded Columns",id:"creating-one-hot-encoded-columns",level:2},{value:"Creating Columns with Mathematical Operations",id:"creating-columns-with-mathematical-operations",level:2},{value:"Creating Columns with String Operations",id:"creating-columns-with-string-operations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"how-to-create-new-columns-derived-from-existing-columns",children:"How to create new columns derived from existing columns"})}),"\n",(0,t.jsx)(e.p,{children:"Creating new columns based on existing data is a common operation in data analysis. TinyFrameJS provides several methods for adding, modifying, and transforming columns in a DataFrame."}),"\n",(0,t.jsx)(e.h2,{id:"adding-new-columns",children:"Adding New Columns"}),"\n",(0,t.jsxs)(e.h3,{id:"using-assign",children:["Using ",(0,t.jsx)(e.code,{children:"assign()"})]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"assign()"})," method allows you to add one or more new columns to a DataFrame:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Create a sample DataFrame\nconst df = new DataFrame([\n  {name: 'Alice', age: 25, salary: 70000},\n  {name: 'Bob', age: 30, salary: 85000},\n  {name: 'Charlie', age: 35, salary: 90000}\n]);\n\n// Add a new column with a constant value\nconst withDepartment = df.assign({\n  department: 'Engineering'\n});\nwithDepartment.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502 department  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 70000  \u2502 Engineering \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 85000  \u2502 Engineering \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 90000  \u2502 Engineering \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"adding-a-column-based-on-existing-columns",children:"Adding a column based on existing columns"}),"\n",(0,t.jsx)(e.p,{children:"You can create a new column based on values from existing columns:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Add a new column based on existing columns\nconst withBonus = df.assign({\n  bonus: row => row.salary * 0.1\n});\nwithBonus.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502 bonus  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 70000  \u2502 7000   \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 85000  \u2502 8500   \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 90000  \u2502 9000   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"adding-multiple-columns-at-once",children:"Adding multiple columns at once"}),"\n",(0,t.jsx)(e.p,{children:"You can add multiple columns in a single operation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Add multiple columns at once\nconst withMultiple = df.assign({\n  bonus: row => row.salary * 0.1,\n  totalComp: row => row.salary + (row.salary * 0.1),\n  ageGroup: row => row.age < 30 ? 'Junior' : 'Senior'\n});\nwithMultiple.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502 bonus  \u2502 totalComp\u2502 ageGroup \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 70000  \u2502 7000   \u2502 77000    \u2502 Junior   \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 85000  \u2502 8500   \u2502 93500    \u2502 Senior   \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 90000  \u2502 9000   \u2502 99000    \u2502 Senior   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"modifying-existing-columns",children:"Modifying Existing Columns"}),"\n",(0,t.jsxs)(e.h3,{id:"using-mutate",children:["Using ",(0,t.jsx)(e.code,{children:"mutate()"})]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"mutate()"})," method allows you to modify existing columns:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Modify an existing column\nconst withModifiedSalary = df.mutate({\n  salary: row => row.salary * 1.05  // 5% raise\n});\nwithModifiedSalary.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 73500  \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 89250  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 94500  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"modifying-multiple-columns",children:"Modifying multiple columns"}),"\n",(0,t.jsx)(e.p,{children:"You can modify multiple columns in a single operation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Modify multiple columns\nconst withModifiedMultiple = df.mutate({\n  salary: row => row.salary * 1.05,  // 5% raise\n  age: row => row.age + 1            // Increment age\n});\nwithModifiedMultiple.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 26  \u2502 73500  \u2502\n\u2502   1   \u2502 Bob     \u2502 31  \u2502 89250  \u2502\n\u2502   2   \u2502 Charlie \u2502 36  \u2502 94500  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"applying-functions-to-columns",children:"Applying Functions to Columns"}),"\n",(0,t.jsxs)(e.h3,{id:"using-apply",children:["Using ",(0,t.jsx)(e.code,{children:"apply()"})]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"apply()"})," method allows you to apply a function to one or more columns:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Apply a function to a single column\nconst withRoundedSalary = df.apply('salary', value => Math.round(value / 1000) * 1000);\nwithRoundedSalary.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 70000  \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 85000  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 90000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"applying-a-function-to-multiple-columns",children:"Applying a function to multiple columns"}),"\n",(0,t.jsx)(e.p,{children:"You can apply a function to multiple columns:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Apply a function to multiple columns\nconst withNumericFormatting = df.apply(['age', 'salary'], value => {\n  if (typeof value === 'number') {\n    return value.toLocaleString();\n  }\n  return value;\n});\nwithNumericFormatting.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age   \u2502 salary   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25    \u2502 70,000   \u2502\n\u2502   1   \u2502 Bob     \u2502 30    \u2502 85,000   \u2502\n\u2502   2   \u2502 Charlie \u2502 35    \u2502 90,000   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h3,{id:"applying-a-function-to-the-entire-dataframe",children:"Applying a function to the entire DataFrame"}),"\n",(0,t.jsx)(e.p,{children:"You can apply a function to all columns:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Apply a function to all columns\nconst withAllFormatted = df.applyAll(value => {\n  if (typeof value === 'number') {\n    return value.toLocaleString();\n  }\n  return value;\n});\nwithAllFormatted.print();\n"})}),"\n",(0,t.jsx)(e.h2,{id:"creating-categorical-columns",children:"Creating Categorical Columns"}),"\n",(0,t.jsxs)(e.h3,{id:"using-categorize",children:["Using ",(0,t.jsx)(e.code,{children:"categorize()"})]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"categorize()"})," method allows you to create a categorical column based on numeric values:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Create a categorical column based on age\nconst withAgeCategory = df.categorize('age', {\n  bins: [0, 25, 35, 100],\n  labels: ['Young', 'Middle', 'Senior']\n});\nwithAgeCategory.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502 age_category\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 70000  \u2502 Young       \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 85000  \u2502 Middle      \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 90000  \u2502 Middle      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"using-cut",children:["Using ",(0,t.jsx)(e.code,{children:"cut()"})]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"cut()"})," method is similar to ",(0,t.jsx)(e.code,{children:"categorize()"})," but allows for more customization:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Create a categorical column with custom options\nconst withSalaryTier = df.cut('salary', {\n  bins: [0, 75000, 85000, 100000],\n  labels: ['Low', 'Medium', 'High'],\n  includeLowest: true,\n  right: false,\n  columnName: 'salary_tier'\n});\nwithSalaryTier.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 salary \u2502 salary_tier \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 70000  \u2502 Low         \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 85000  \u2502 Medium      \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 90000  \u2502 High        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"creating-one-hot-encoded-columns",children:"Creating One-Hot Encoded Columns"}),"\n",(0,t.jsx)(e.p,{children:"One-hot encoding is a process of converting categorical variables into a form that could be provided to machine learning algorithms."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Create a DataFrame with a categorical column\nconst dfCat = new DataFrame([\n  {name: 'Alice', department: 'Engineering'},\n  {name: 'Bob', department: 'Marketing'},\n  {name: 'Charlie', department: 'Engineering'},\n  {name: 'David', department: 'Sales'},\n  {name: 'Eve', department: 'Marketing'}\n]);\n\n// Create one-hot encoded columns\nconst withOneHot = dfCat.oneHot('department');\nwithOneHot.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 department  \u2502 department_Engin..\u2502 department_Mar..\u2502 department_Sal..\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 Engineering \u2502 1                 \u2502 0              \u2502 0              \u2502\n\u2502   1   \u2502 Bob     \u2502 Marketing   \u2502 0                 \u2502 1              \u2502 0              \u2502\n\u2502   2   \u2502 Charlie \u2502 Engineering \u2502 1                 \u2502 0              \u2502 0              \u2502\n\u2502   3   \u2502 David   \u2502 Sales       \u2502 0                 \u2502 0              \u2502 1              \u2502\n\u2502   4   \u2502 Eve     \u2502 Marketing   \u2502 0                 \u2502 1              \u2502 0              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"creating-columns-with-mathematical-operations",children:"Creating Columns with Mathematical Operations"}),"\n",(0,t.jsx)(e.p,{children:"TinyFrameJS provides methods for performing mathematical operations on columns:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Create a DataFrame with numeric columns\nconst dfNum = new DataFrame([\n  {x: 1, y: 2},\n  {x: 3, y: 4},\n  {x: 5, y: 6}\n]);\n\n// Add columns with mathematical operations\nconst withMath = dfNum.assign({\n  sum: row => row.x + row.y,\n  diff: row => row.x - row.y,\n  product: row => row.x * row.y,\n  quotient: row => row.x / row.y,\n  power: row => Math.pow(row.x, row.y),\n  sqrt_x: row => Math.sqrt(row.x),\n  log_y: row => Math.log(row.y)\n});\nwithMath.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 x   \u2502 y   \u2502 sum \u2502 diff \u2502 product \u2502 quotient \u2502 sqrt_x \u2502 log_y  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 1   \u2502 2   \u2502 3   \u2502 -1   \u2502 2       \u2502 0.5      \u2502 1      \u2502 0.6931 \u2502\n\u2502   1   \u2502 3   \u2502 4   \u2502 7   \u2502 -1   \u2502 12      \u2502 0.75     \u2502 1.7321 \u2502 1.3863 \u2502\n\u2502   2   \u2502 5   \u2502 6   \u2502 11  \u2502 -1   \u2502 30      \u2502 0.8333   \u2502 2.2361 \u2502 1.7918 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"creating-columns-with-string-operations",children:"Creating Columns with String Operations"}),"\n",(0,t.jsx)(e.p,{children:"You can also perform string operations on columns:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// Create a DataFrame with string columns\nconst dfStr = new DataFrame([\n  {firstName: 'John', lastName: 'Doe'},\n  {firstName: 'Jane', lastName: 'Smith'},\n  {firstName: 'Bob', lastName: 'Johnson'}\n]);\n\n// Add columns with string operations\nconst withStrOps = dfStr.assign({\n  fullName: row => `${row.firstName} ${row.lastName}`,\n  initials: row => `${row.firstName[0]}.${row.lastName[0]}.`,\n  nameLength: row => row.firstName.length + row.lastName.length,\n  upperFirst: row => row.firstName.toUpperCase(),\n  lowerLast: row => row.lastName.toLowerCase()\n});\nwithStrOps.print();\n"})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 firstName\u2502 lastName \u2502 fullName       \u2502 initials \u2502 nameLength \u2502 upperFirst \u2502 lowerLast \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 John     \u2502 Doe      \u2502 John Doe       \u2502 J.D.     \u2502 7          \u2502 JOHN       \u2502 doe       \u2502\n\u2502   1   \u2502 Jane     \u2502 Smith    \u2502 Jane Smith     \u2502 J.S.     \u2502 9          \u2502 JANE       \u2502 smith     \u2502\n\u2502   2   \u2502 Bob      \u2502 Johnson  \u2502 Bob Johnson    \u2502 B.J.     \u2502 10         \u2502 BOB        \u2502 johnson   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(e.p,{children:"Now that you know how to create and manipulate columns in TinyFrameJS, you can:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Learn how to ",(0,t.jsx)(e.a,{href:"./statistics",children:"calculate summary statistics"})," on your data"]}),"\n",(0,t.jsxs)(e.li,{children:["Explore how to ",(0,t.jsx)(e.a,{href:"./reshaping",children:"reshape your data"})," for different analyses"]}),"\n",(0,t.jsxs)(e.li,{children:["Discover how to ",(0,t.jsx)(e.a,{href:"./combining-tables",children:"combine data from multiple tables"})]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);