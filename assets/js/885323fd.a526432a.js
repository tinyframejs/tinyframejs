"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[1180],{3774:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>s});var n=a(6672);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}},7261:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"getting-started/tutorials/plotting","title":"How to create plots in TinyFrameJS?","description":"Learn how to create visualizations from your data using TinyFrameJS","source":"@site/docs/getting-started/tutorials/plotting.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/plotting","permalink":"/docs/getting-started/tutorials/plotting","draft":false,"unlisted":false,"editUrl":"https://github.com/AlphaQuantJS/tinyframejs/edit/main/docs/getting-started/tutorials/plotting.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"plotting","title":"How to create plots in TinyFrameJS?","sidebar_position":4,"description":"Learn how to create visualizations from your data using TinyFrameJS"},"sidebar":"docs","previous":{"title":"How do I select a subset of a table?","permalink":"/docs/getting-started/tutorials/filtering"},"next":{"title":"How to create new columns derived from existing columns","permalink":"/docs/getting-started/tutorials/derived-columns"}}');var i=a(3420),r=a(3774);const o={id:"plotting",title:"How to create plots in TinyFrameJS?",sidebar_position:4,description:"Learn how to create visualizations from your data using TinyFrameJS"},s="How to create plots in TinyFrameJS?",l={},c=[{value:"Basic Plotting",id:"basic-plotting",level:2},{value:"Line Charts",id:"line-charts",level:3},{value:"Bar Charts",id:"bar-charts",level:3},{value:"Scatter Plots",id:"scatter-plots",level:3},{value:"Pie Charts",id:"pie-charts",level:3},{value:"Advanced Plotting",id:"advanced-plotting",level:2},{value:"Histograms",id:"histograms",level:3},{value:"Box Plots",id:"box-plots",level:3},{value:"Heatmaps",id:"heatmaps",level:3},{value:"Interactive Plots",id:"interactive-plots",level:2},{value:"Multiple Plots",id:"multiple-plots",level:2},{value:"Saving Plots",id:"saving-plots",level:2},{value:"Customizing Plots",id:"customizing-plots",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"how-to-create-plots-in-tinyframejs",children:"How to create plots in TinyFrameJS?"})}),"\n",(0,i.jsxs)(t.p,{children:["Data visualization is an essential part of data analysis. TinyFrameJS provides a simple and intuitive API for creating various types of plots from your data. Under the hood, TinyFrameJS uses ",(0,i.jsx)(t.a,{href:"https://www.chartjs.org/",children:"Chart.js"}),", a popular JavaScript charting library, to render visualizations."]}),"\n",(0,i.jsx)(t.h2,{id:"basic-plotting",children:"Basic Plotting"}),"\n",(0,i.jsx)(t.h3,{id:"line-charts",children:"Line Charts"}),"\n",(0,i.jsx)(t.p,{children:"Line charts are useful for showing trends over time or continuous data:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Create a DataFrame with time series data\nconst df = new DataFrame({\n  date: ['2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01', '2023-05-01'],\n  value: [10, 15, 13, 17, 20],\n  forecast: [11, 14, 15, 16, 19]\n});\n\n// Create a simple line chart\ndf.plot.line('date', 'value');\n\n// Create a line chart with multiple series\ndf.plot.line('date', ['value', 'forecast']);\n\n// Customize the chart\ndf.plot.line('date', ['value', 'forecast'], {\n  title: 'Monthly Values',\n  xLabel: 'Month',\n  yLabel: 'Value',\n  colors: ['#3394d6', '#ff6b6b'],\n  legend: true,\n  height: 400,\n  width: 800\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"bar-charts",children:"Bar Charts"}),"\n",(0,i.jsx)(t.p,{children:"Bar charts are great for comparing discrete categories:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a DataFrame with categorical data\nconst df = new DataFrame({\n  category: ['A', 'B', 'C', 'D', 'E'],\n  value: [10, 15, 7, 12, 9],\n  comparison: [8, 12, 10, 9, 11]\n});\n\n// Create a simple bar chart\ndf.plot.bar('category', 'value');\n\n// Create a bar chart with multiple series\ndf.plot.bar('category', ['value', 'comparison']);\n\n// Create a horizontal bar chart\ndf.plot.barh('category', 'value');\n\n// Create a stacked bar chart\ndf.plot.bar('category', ['value', 'comparison'], {\n  stacked: true,\n  title: 'Comparison by Category'\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"scatter-plots",children:"Scatter Plots"}),"\n",(0,i.jsx)(t.p,{children:"Scatter plots are useful for showing the relationship between two variables:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a DataFrame with two numeric variables\nconst df = new DataFrame({\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  y: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29],\n  size: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n  category: ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'C']\n});\n\n// Create a simple scatter plot\ndf.plot.scatter('x', 'y');\n\n// Create a scatter plot with bubble size\ndf.plot.scatter('x', 'y', {\n  size: 'size',\n  title: 'X vs Y with Size'\n});\n\n// Create a scatter plot with color by category\ndf.plot.scatter('x', 'y', {\n  color: 'category',\n  title: 'X vs Y by Category'\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"pie-charts",children:"Pie Charts"}),"\n",(0,i.jsx)(t.p,{children:"Pie charts are useful for showing proportions of a whole:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a DataFrame with categorical data\nconst df = new DataFrame({\n  category: ['A', 'B', 'C', 'D', 'E'],\n  value: [10, 15, 7, 12, 9]\n});\n\n// Create a simple pie chart\ndf.plot.pie('category', 'value');\n\n// Create a donut chart\ndf.plot.pie('category', 'value', {\n  donut: true,\n  title: 'Distribution by Category'\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"advanced-plotting",children:"Advanced Plotting"}),"\n",(0,i.jsx)(t.h3,{id:"histograms",children:"Histograms"}),"\n",(0,i.jsx)(t.p,{children:"Histograms show the distribution of a numeric variable:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a DataFrame with numeric data\nconst df = new DataFrame({\n  value: [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7]\n});\n\n// Create a simple histogram\ndf.plot.histogram('value');\n\n// Customize the histogram\ndf.plot.histogram('value', {\n  bins: 10,\n  title: 'Distribution of Values',\n  xLabel: 'Value',\n  yLabel: 'Frequency',\n  color: '#3394d6'\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"box-plots",children:"Box Plots"}),"\n",(0,i.jsx)(t.p,{children:"Box plots show the distribution of a numeric variable across categories:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a DataFrame with numeric data by category\nconst df = new DataFrame({\n  category: ['A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C'],\n  value: [1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6]\n});\n\n// Create a box plot\ndf.plot.box('category', 'value');\n\n// Customize the box plot\ndf.plot.box('category', 'value', {\n  title: 'Distribution by Category',\n  xLabel: 'Category',\n  yLabel: 'Value',\n  colors: ['#3394d6', '#ff6b6b', '#7ec699']\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"heatmaps",children:"Heatmaps"}),"\n",(0,i.jsx)(t.p,{children:"Heatmaps show the relationship between two categorical variables:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a DataFrame with data for a heatmap\nconst df = new DataFrame({\n  x: ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C'],\n  y: ['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z'],\n  value: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n});\n\n// Create a heatmap\ndf.plot.heatmap('x', 'y', 'value');\n\n// Customize the heatmap\ndf.plot.heatmap('x', 'y', 'value', {\n  title: 'Heatmap Example',\n  colorScale: 'viridis',\n  showValues: true\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"interactive-plots",children:"Interactive Plots"}),"\n",(0,i.jsx)(t.p,{children:"TinyFrameJS supports interactive plots with tooltips, zooming, and panning:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create an interactive line chart\ndf.plot.line('date', 'value', {\n  interactive: true,\n  tooltip: true,\n  zoom: true,\n  pan: true\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"multiple-plots",children:"Multiple Plots"}),"\n",(0,i.jsx)(t.p,{children:"You can create multiple plots in a grid layout:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Create a 2x2 grid of plots\ndf.plot.grid(2, 2, [\n  { type: 'line', x: 'date', y: 'value', title: 'Line Chart' },\n  { type: 'bar', x: 'category', y: 'value', title: 'Bar Chart' },\n  { type: 'scatter', x: 'x', y: 'y', title: 'Scatter Plot' },\n  { type: 'pie', labels: 'category', values: 'value', title: 'Pie Chart' }\n]);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"saving-plots",children:"Saving Plots"}),"\n",(0,i.jsx)(t.p,{children:"You can save plots to various formats:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Save a plot to PNG (Node.js environment)\nconst plot = df.plot.line('date', 'value');\nplot.save('plot.png');\n\n// Save a plot to SVG\nplot.save('plot.svg');\n\n// Save a plot to PDF\nplot.save('plot.pdf');\n\n// Get a data URL for a plot (works in browser and Node.js)\nconst dataUrl = plot.toDataURL();\nconsole.log(dataUrl);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"customizing-plots",children:"Customizing Plots"}),"\n",(0,i.jsx)(t.p,{children:"TinyFrameJS provides a wide range of options for customizing plots:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Customize a line chart\ndf.plot.line('date', 'value', {\n  // General options\n  title: 'Monthly Values',\n  subtitle: 'Data from 2023',\n  xLabel: 'Month',\n  yLabel: 'Value',\n  legend: true,\n  height: 400,\n  width: 800,\n  \n  // Style options\n  backgroundColor: '#f8f9fa',\n  fontFamily: 'Arial, sans-serif',\n  fontSize: 12,\n  fontColor: '#333',\n  borderColor: '#ddd',\n  borderWidth: 1,\n  \n  // Line options\n  lineWidth: 2,\n  pointRadius: 4,\n  pointHoverRadius: 6,\n  fill: false,\n  tension: 0.4,  // Curve smoothness (0 = straight lines)\n  \n  // Axis options\n  xGrid: true,\n  yGrid: true,\n  xTickRotation: 45,\n  yTickFormat: (value) => `$${value}`,\n  \n  // Animation options\n  animation: true,\n  animationDuration: 1000,\n  \n  // Interaction options\n  tooltip: true,\n  zoom: true,\n  pan: true\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(t.p,{children:"Now that you know how to create plots with TinyFrameJS, you can:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Learn how to ",(0,i.jsx)(t.a,{href:"./derived-columns",children:"create derived columns"})," for more complex visualizations"]}),"\n",(0,i.jsxs)(t.li,{children:["Explore how to ",(0,i.jsx)(t.a,{href:"./statistics",children:"calculate summary statistics"})," to better understand your data"]}),"\n",(0,i.jsxs)(t.li,{children:["Discover how to ",(0,i.jsx)(t.a,{href:"./reshaping",children:"reshape your data"})," to make it more suitable for visualization"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);