"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[5481],{551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"getting-started/tutorials/reshaping","title":"How to reshape the layout of tables","description":"Learn how to transform the structure of your data in TinyFrameJS","source":"@site/docs/getting-started/tutorials/reshaping.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/reshaping","permalink":"/tinyframejs/docs/getting-started/tutorials/reshaping","draft":false,"unlisted":false,"editUrl":"https://github.com/tinyframejs/tinyframejs/edit/main/docs/getting-started/tutorials/reshaping.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"reshaping","title":"How to reshape the layout of tables","sidebar_position":7,"description":"Learn how to transform the structure of your data in TinyFrameJS"},"sidebar":"docs","previous":{"title":"How to calculate summary statistics","permalink":"/tinyframejs/docs/getting-started/tutorials/statistics"},"next":{"title":"How to combine data from multiple tables","permalink":"/tinyframejs/docs/getting-started/tutorials/combining-tables"}}');var i=t(4848),s=t(8453);const r={id:"reshaping",title:"How to reshape the layout of tables",sidebar_position:7,description:"Learn how to transform the structure of your data in TinyFrameJS"},o="How to reshape the layout of tables",l={},d=[{value:"Pivoting Data",id:"pivoting-data",level:2},{value:"Using <code>pivot()</code>",id:"using-pivot",level:3},{value:"Using <code>pivotTable()</code>",id:"using-pivottable",level:3},{value:"Melting Data",id:"melting-data",level:2},{value:"Using <code>melt()</code>",id:"using-melt",level:3},{value:"Stacking and Unstacking",id:"stacking-and-unstacking",level:2},{value:"Using <code>stack()</code>",id:"using-stack",level:3},{value:"Using <code>unstack()</code>",id:"using-unstack",level:3},{value:"Aggregating Data",id:"aggregating-data",level:2},{value:"Using <code>groupby().agg()</code>",id:"using-groupbyagg",level:3},{value:"Transposing Data",id:"transposing-data",level:2},{value:"Using <code>transpose()</code>",id:"using-transpose",level:3},{value:"Reshaping Time Series Data",id:"reshaping-time-series-data",level:2},{value:"Using <code>resample()</code>",id:"using-resample",level:3},{value:"Exploding Lists",id:"exploding-lists",level:2},{value:"Using <code>explode()</code>",id:"using-explode",level:3},{value:"Combining Reshaping Operations",id:"combining-reshaping-operations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-to-reshape-the-layout-of-tables",children:"How to reshape the layout of tables"})}),"\n",(0,i.jsx)(n.p,{children:"Reshaping data is a common operation in data analysis. It involves changing the structure or layout of your data without changing the actual values. TinyFrameJS provides several methods for reshaping data to make it suitable for different types of analysis."}),"\n",(0,i.jsx)(n.h2,{id:"pivoting-data",children:"Pivoting Data"}),"\n",(0,i.jsxs)(n.h3,{id:"using-pivot",children:["Using ",(0,i.jsx)(n.code,{children:"pivot()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"pivot()"})," method allows you to reshape data from long format to wide format:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Create a DataFrame in long format\nconst dfLong = new DataFrame([\n  {date: '2023-01-01', city: 'New York', metric: 'temperature', value: 32},\n  {date: '2023-01-01', city: 'New York', metric: 'humidity', value: 65},\n  {date: '2023-01-01', city: 'Chicago', metric: 'temperature', value: 25},\n  {date: '2023-01-01', city: 'Chicago', metric: 'humidity', value: 60},\n  {date: '2023-01-02', city: 'New York', metric: 'temperature', value: 35},\n  {date: '2023-01-02', city: 'New York', metric: 'humidity', value: 70},\n  {date: '2023-01-02', city: 'Chicago', metric: 'temperature', value: 28},\n  {date: '2023-01-02', city: 'Chicago', metric: 'humidity', value: 55}\n]);\n\n// Pivot the data to wide format\nconst dfWide = dfLong.pivot({\n  index: ['date', 'city'],  // Columns to use as index\n  columns: 'metric',        // Column to use for new column names\n  values: 'value'           // Column containing the values\n});\n\ndfWide.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 city      \u2502 temperature \u2502 humidity \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 New York  \u2502 32          \u2502 65       \u2502\n\u2502 2023-01-01 \u2502 Chicago   \u2502 25          \u2502 60       \u2502\n\u2502 2023-01-02 \u2502 New York  \u2502 35          \u2502 70       \u2502\n\u2502 2023-01-02 \u2502 Chicago   \u2502 28          \u2502 55       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"using-pivottable",children:["Using ",(0,i.jsx)(n.code,{children:"pivotTable()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"pivotTable()"})," method allows you to create a pivot table with aggregation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a pivot table with aggregation\nconst pivotTable = dfLong.pivotTable({\n  index: 'date',           // Column to use as index\n  columns: 'city',         // Column to use for new column names\n  values: 'value',         // Column containing the values\n  aggfunc: 'mean'          // Aggregation function\n});\n\npivotTable.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 New York  \u2502 Chicago  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 48.5      \u2502 42.5     \u2502\n\u2502 2023-01-02 \u2502 52.5      \u2502 41.5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can specify multiple aggregation functions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a pivot table with multiple aggregation functions\nconst multiAggPivot = dfLong.pivotTable({\n  index: 'date',\n  columns: 'city',\n  values: 'value',\n  aggfunc: ['mean', 'sum', 'count']\n});\n\nmultiAggPivot.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 New York_mean \u2502 Chicago_mean  \u2502 New York_sum  \u2502 Chicago_sum   \u2502 New York_count\u2502 Chicago_count \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 48.5          \u2502 42.5          \u2502 97            \u2502 85            \u2502 2             \u2502 2             \u2502\n\u2502 2023-01-02 \u2502 52.5          \u2502 41.5          \u2502 105           \u2502 83            \u2502 2             \u2502 2             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"melting-data",children:"Melting Data"}),"\n",(0,i.jsxs)(n.h3,{id:"using-melt",children:["Using ",(0,i.jsx)(n.code,{children:"melt()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"melt()"})," method allows you to reshape data from wide format to long format:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame in wide format\nconst dfWide = new DataFrame([\n  {date: '2023-01-01', city: 'New York', temperature: 32, humidity: 65},\n  {date: '2023-01-01', city: 'Chicago', temperature: 25, humidity: 60},\n  {date: '2023-01-02', city: 'New York', temperature: 35, humidity: 70},\n  {date: '2023-01-02', city: 'Chicago', temperature: 28, humidity: 55}\n]);\n\n// Melt the data to long format\nconst dfLong = dfWide.melt({\n  id_vars: ['date', 'city'],      // Columns to keep as is\n  value_vars: ['temperature', 'humidity'],  // Columns to melt\n  var_name: 'metric',             // Name for the variable column\n  value_name: 'value'             // Name for the value column\n});\n\ndfLong.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 city      \u2502 metric     \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 New York  \u2502 temperature\u2502 32    \u2502\n\u2502 2023-01-01 \u2502 Chicago   \u2502 temperature\u2502 25    \u2502\n\u2502 2023-01-02 \u2502 New York  \u2502 temperature\u2502 35    \u2502\n\u2502 2023-01-02 \u2502 Chicago   \u2502 temperature\u2502 28    \u2502\n\u2502 2023-01-01 \u2502 New York  \u2502 humidity   \u2502 65    \u2502\n\u2502 2023-01-01 \u2502 Chicago   \u2502 humidity   \u2502 60    \u2502\n\u2502 2023-01-02 \u2502 New York  \u2502 humidity   \u2502 70    \u2502\n\u2502 2023-01-02 \u2502 Chicago   \u2502 humidity   \u2502 55    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"stacking-and-unstacking",children:"Stacking and Unstacking"}),"\n",(0,i.jsxs)(n.h3,{id:"using-stack",children:["Using ",(0,i.jsx)(n.code,{children:"stack()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"stack()"})," method allows you to pivot a level of column labels to row labels:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a multi-level column DataFrame\nconst dfMultiLevel = new DataFrame({\n  'New York_temperature': [32, 35],\n  'New York_humidity': [65, 70],\n  'Chicago_temperature': [25, 28],\n  'Chicago_humidity': [60, 55]\n}, {\n  index: ['2023-01-01', '2023-01-02']\n});\n\n// Stack the city-metric level\nconst stacked = dfMultiLevel.stack();\nstacked.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 city     \u2502 metric     \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 New York \u2502 temperature\u2502 32    \u2502\n\u2502 2023-01-01 \u2502 New York \u2502 humidity   \u2502 65    \u2502\n\u2502 2023-01-01 \u2502 Chicago  \u2502 temperature\u2502 25    \u2502\n\u2502 2023-01-01 \u2502 Chicago  \u2502 humidity   \u2502 60    \u2502\n\u2502 2023-01-02 \u2502 New York \u2502 temperature\u2502 35    \u2502\n\u2502 2023-01-02 \u2502 New York \u2502 humidity   \u2502 70    \u2502\n\u2502 2023-01-02 \u2502 Chicago  \u2502 temperature\u2502 28    \u2502\n\u2502 2023-01-02 \u2502 Chicago  \u2502 humidity   \u2502 55    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"using-unstack",children:["Using ",(0,i.jsx)(n.code,{children:"unstack()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"unstack()"})," method allows you to pivot a level of row labels to column labels:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a multi-level index DataFrame\nconst dfMultiIndex = new DataFrame({\n  'value': [32, 65, 25, 60, 35, 70, 28, 55]\n}, {\n  index: [\n    ['2023-01-01', '2023-01-01', '2023-01-01', '2023-01-01', '2023-01-02', '2023-01-02', '2023-01-02', '2023-01-02'],\n    ['New York', 'New York', 'Chicago', 'Chicago', 'New York', 'New York', 'Chicago', 'Chicago'],\n    ['temperature', 'humidity', 'temperature', 'humidity', 'temperature', 'humidity', 'temperature', 'humidity']\n  ],\n  indexNames: ['date', 'city', 'metric']\n});\n\n// Unstack the metric level\nconst unstacked = dfMultiIndex.unstack('metric');\nunstacked.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 city     \u2502 temperature\u2502 humidity \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 New York \u2502 32         \u2502 65       \u2502\n\u2502 2023-01-01 \u2502 Chicago  \u2502 25         \u2502 60       \u2502\n\u2502 2023-01-02 \u2502 New York \u2502 35         \u2502 70       \u2502\n\u2502 2023-01-02 \u2502 Chicago  \u2502 28         \u2502 55       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"aggregating-data",children:"Aggregating Data"}),"\n",(0,i.jsxs)(n.h3,{id:"using-groupbyagg",children:["Using ",(0,i.jsx)(n.code,{children:"groupby().agg()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"groupby().agg()"})," method allows you to aggregate data by groups:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame\nconst df = new DataFrame([\n  {date: '2023-01-01', city: 'New York', category: 'A', sales: 100, profit: 20},\n  {date: '2023-01-01', city: 'New York', category: 'B', sales: 150, profit: 30},\n  {date: '2023-01-01', city: 'Chicago', category: 'A', sales: 80, profit: 15},\n  {date: '2023-01-01', city: 'Chicago', category: 'B', sales: 120, profit: 25},\n  {date: '2023-01-02', city: 'New York', category: 'A', sales: 110, profit: 22},\n  {date: '2023-01-02', city: 'New York', category: 'B', sales: 160, profit: 32},\n  {date: '2023-01-02', city: 'Chicago', category: 'A', sales: 90, profit: 18},\n  {date: '2023-01-02', city: 'Chicago', category: 'B', sales: 130, profit: 26}\n]);\n\n// Aggregate by city and category\nconst aggregated = df\n  .groupby(['city', 'category'])\n  .agg({\n    sales: ['sum', 'mean'],\n    profit: ['sum', 'mean']\n  });\n\naggregated.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 city     \u2502 category \u2502 sales_sum  \u2502 sales_mean \u2502 profit_sum \u2502 profit_mean\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Chicago  \u2502 A        \u2502 170        \u2502 85         \u2502 33         \u2502 16.5       \u2502\n\u2502 Chicago  \u2502 B        \u2502 250        \u2502 125        \u2502 51         \u2502 25.5       \u2502\n\u2502 New York \u2502 A        \u2502 210        \u2502 105        \u2502 42         \u2502 21         \u2502\n\u2502 New York \u2502 B        \u2502 310        \u2502 155        \u2502 62         \u2502 31         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"transposing-data",children:"Transposing Data"}),"\n",(0,i.jsxs)(n.h3,{id:"using-transpose",children:["Using ",(0,i.jsx)(n.code,{children:"transpose()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"transpose()"})," method allows you to swap rows and columns:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame\nconst df = new DataFrame({\n  'A': [1, 2, 3],\n  'B': [4, 5, 6],\n  'C': [7, 8, 9]\n}, {\n  index: ['X', 'Y', 'Z']\n});\n\n// Transpose the DataFrame\nconst transposed = df.transpose();\ntransposed.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 X   \u2502 Y   \u2502 Z   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 A     \u2502 1   \u2502 2   \u2502 3   \u2502\n\u2502 B     \u2502 4   \u2502 5   \u2502 6   \u2502\n\u2502 C     \u2502 7   \u2502 8   \u2502 9   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reshaping-time-series-data",children:"Reshaping Time Series Data"}),"\n",(0,i.jsxs)(n.h3,{id:"using-resample",children:["Using ",(0,i.jsx)(n.code,{children:"resample()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"resample()"})," method allows you to resample time series data to a different frequency:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a time series DataFrame\nconst timeSeries = new DataFrame({\n  'date': [\n    '2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05',\n    '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09', '2023-01-10'\n  ],\n  'value': [10, 12, 15, 14, 16, 18, 17, 19, 20, 22]\n});\n\n// Set the date column as index\nconst timeSeriesIndexed = timeSeries.setIndex('date');\n\n// Resample to weekly frequency\nconst weekly = timeSeriesIndexed.resample('W', {\n  aggregation: {\n    value: 'mean'\n  }\n});\n\nweekly.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 13.4  \u2502\n\u2502 2023-01-08 \u2502 19.2  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"exploding-lists",children:"Exploding Lists"}),"\n",(0,i.jsxs)(n.h3,{id:"using-explode",children:["Using ",(0,i.jsx)(n.code,{children:"explode()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"explode()"})," method allows you to transform list-like elements in a column to rows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame with list-like elements\nconst dfLists = new DataFrame([\n  {id: 1, tags: ['red', 'blue']},\n  {id: 2, tags: ['green']},\n  {id: 3, tags: ['red', 'green', 'blue']}\n]);\n\n// Explode the tags column\nconst exploded = dfLists.explode('tags');\nexploded.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 tags  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 red   \u2502\n\u2502 0     \u2502 1   \u2502 blue  \u2502\n\u2502 1     \u2502 2   \u2502 green \u2502\n\u2502 2     \u2502 3   \u2502 red   \u2502\n\u2502 2     \u2502 3   \u2502 green \u2502\n\u2502 2     \u2502 3   \u2502 blue  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"combining-reshaping-operations",children:"Combining Reshaping Operations"}),"\n",(0,i.jsx)(n.p,{children:"You can combine multiple reshaping operations to transform your data in complex ways:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame\nconst df = new DataFrame([\n  {date: '2023-01-01', city: 'New York', category: 'A', sales: 100, profit: 20},\n  {date: '2023-01-01', city: 'New York', category: 'B', sales: 150, profit: 30},\n  {date: '2023-01-01', city: 'Chicago', category: 'A', sales: 80, profit: 15},\n  {date: '2023-01-01', city: 'Chicago', category: 'B', sales: 120, profit: 25},\n  {date: '2023-01-02', city: 'New York', category: 'A', sales: 110, profit: 22},\n  {date: '2023-01-02', city: 'New York', category: 'B', sales: 160, profit: 32},\n  {date: '2023-01-02', city: 'Chicago', category: 'A', sales: 90, profit: 18},\n  {date: '2023-01-02', city: 'Chicago', category: 'B', sales: 130, profit: 26}\n]);\n\n// Combine multiple reshaping operations\nconst result = df\n  // First, melt the sales and profit columns\n  .melt({\n    id_vars: ['date', 'city', 'category'],\n    value_vars: ['sales', 'profit'],\n    var_name: 'metric',\n    value_name: 'value'\n  })\n  // Then, pivot to get metrics as columns and categories as rows\n  .pivot({\n    index: ['date', 'city'],\n    columns: ['category', 'metric'],\n    values: 'value'\n  })\n  // Finally, aggregate by date\n  .groupby('date')\n  .agg({\n    'A_sales': 'sum',\n    'B_sales': 'sum',\n    'A_profit': 'sum',\n    'B_profit': 'sum'\n  });\n\nresult.print();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you know how to reshape data with TinyFrameJS, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn how to ",(0,i.jsx)(n.a,{href:"./combining-tables",children:"combine data from multiple tables"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore how to ",(0,i.jsx)(n.a,{href:"./time-series",children:"handle time series data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Discover how to ",(0,i.jsx)(n.a,{href:"./text-processing",children:"process textual data"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);