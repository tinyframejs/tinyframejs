"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[8012],{2420:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"getting-started/tutorials/time-series","title":"How to handle time series data","description":"Learn how to work with time series data in TinyFrameJS","source":"@site/docs/getting-started/tutorials/time-series.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/time-series","permalink":"/tinyframejs/docs/getting-started/tutorials/time-series","draft":false,"unlisted":false,"editUrl":"https://github.com/tinyframejs/tinyframejs/edit/main/docs/getting-started/tutorials/time-series.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"time-series","title":"How to handle time series data","sidebar_position":9,"description":"Learn how to work with time series data in TinyFrameJS"},"sidebar":"docs","previous":{"title":"How to combine data from multiple tables","permalink":"/tinyframejs/docs/getting-started/tutorials/combining-tables"},"next":{"title":"How to manipulate textual data","permalink":"/tinyframejs/docs/getting-started/tutorials/text-processing"}}');var i=t(3420),s=t(3774);const r={id:"time-series",title:"How to handle time series data",sidebar_position:9,description:"Learn how to work with time series data in TinyFrameJS"},l="How to handle time series data",d={},o=[{value:"Creating Time Series Data",id:"creating-time-series-data",level:2},{value:"From arrays",id:"from-arrays",level:3},{value:"From date range",id:"from-date-range",level:3},{value:"From CSV with dates",id:"from-csv-with-dates",level:3},{value:"Setting a DateTimeIndex",id:"setting-a-datetimeindex",level:2},{value:"Date and Time Operations",id:"date-and-time-operations",level:2},{value:"Extracting date components",id:"extracting-date-components",level:3},{value:"Date arithmetic",id:"date-arithmetic",level:3},{value:"Time Series Analysis",id:"time-series-analysis",level:2},{value:"Resampling",id:"resampling",level:3},{value:"Upsampling",id:"upsampling",level:3},{value:"Rolling windows",id:"rolling-windows",level:3},{value:"Expanding windows",id:"expanding-windows",level:3},{value:"Time Series Visualization",id:"time-series-visualization",level:2},{value:"Multiple time series",id:"multiple-time-series",level:3},{value:"Seasonal decomposition",id:"seasonal-decomposition",level:3},{value:"Time Series Forecasting",id:"time-series-forecasting",level:2},{value:"Simple forecasting",id:"simple-forecasting",level:3},{value:"Exponential smoothing",id:"exponential-smoothing",level:3},{value:"Working with Multiple Time Zones",id:"working-with-multiple-time-zones",level:2},{value:"Handling Missing Data in Time Series",id:"handling-missing-data-in-time-series",level:2},{value:"Interpolation",id:"interpolation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-to-handle-time-series-data",children:"How to handle time series data"})}),"\n",(0,i.jsx)(n.p,{children:"Time series data is a sequence of data points collected over time intervals. TinyFrameJS provides powerful tools for handling, analyzing, and visualizing time series data."}),"\n",(0,i.jsx)(n.h2,{id:"creating-time-series-data",children:"Creating Time Series Data"}),"\n",(0,i.jsx)(n.h3,{id:"from-arrays",children:"From arrays"}),"\n",(0,i.jsx)(n.p,{children:"You can create a time series DataFrame from arrays:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Create a time series DataFrame\nconst timeSeries = new DataFrame({\n  date: [\n    '2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05',\n    '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09', '2023-01-10'\n  ],\n  value: [10, 12, 15, 14, 16, 18, 17, 19, 20, 22]\n});\n\ntimeSeries.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 2023-01-01 \u2502 10    \u2502\n\u2502 1     \u2502 2023-01-02 \u2502 12    \u2502\n\u2502 2     \u2502 2023-01-03 \u2502 15    \u2502\n\u2502 3     \u2502 2023-01-04 \u2502 14    \u2502\n\u2502 4     \u2502 2023-01-05 \u2502 16    \u2502\n\u2502 5     \u2502 2023-01-06 \u2502 18    \u2502\n\u2502 6     \u2502 2023-01-07 \u2502 17    \u2502\n\u2502 7     \u2502 2023-01-08 \u2502 19    \u2502\n\u2502 8     \u2502 2023-01-09 \u2502 20    \u2502\n\u2502 9     \u2502 2023-01-10 \u2502 22    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"from-date-range",children:"From date range"}),"\n",(0,i.jsx)(n.p,{children:"You can create a time series with a regular date range:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a date range\nconst dateRange = DataFrame.dateRange({\n  start: '2023-01-01',\n  end: '2023-01-10',\n  freq: 'D'  // Daily frequency\n});\n\n// Create a DataFrame with the date range\nconst emptyTimeSeries = new DataFrame({\n  date: dateRange\n});\n\n// Add random values\nconst randomTimeSeries = emptyTimeSeries.assign({\n  value: () => Math.floor(Math.random() * 100)\n});\n\nrandomTimeSeries.print();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"from-csv-with-dates",children:"From CSV with dates"}),"\n",(0,i.jsx)(n.p,{children:"You can load time series data from a CSV file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Load time series data from CSV\nconst stockPrices = DataFrame.readCSV('stock_prices.csv', {\n  parseDate: ['date']  // Parse this column as dates\n});\n\nstockPrices.head().print();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setting-a-datetimeindex",children:"Setting a DateTimeIndex"}),"\n",(0,i.jsx)(n.p,{children:"To work effectively with time series data, you should set the date column as the index:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Set the date column as index\nconst timeSeriesIndexed = timeSeries.setIndex('date');\ntimeSeriesIndexed.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502\n\u2502 2023-01-02 \u2502 12    \u2502\n\u2502 2023-01-03 \u2502 15    \u2502\n\u2502 2023-01-04 \u2502 14    \u2502\n\u2502 2023-01-05 \u2502 16    \u2502\n\u2502 2023-01-06 \u2502 18    \u2502\n\u2502 2023-01-07 \u2502 17    \u2502\n\u2502 2023-01-08 \u2502 19    \u2502\n\u2502 2023-01-09 \u2502 20    \u2502\n\u2502 2023-01-10 \u2502 22    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"date-and-time-operations",children:"Date and Time Operations"}),"\n",(0,i.jsx)(n.h3,{id:"extracting-date-components",children:"Extracting date components"}),"\n",(0,i.jsx)(n.p,{children:"You can extract components from date columns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Extract date components\nconst withComponents = timeSeriesIndexed.assign({\n  year: row => new Date(row.date).getFullYear(),\n  month: row => new Date(row.date).getMonth() + 1,  // Months are 0-indexed\n  day: row => new Date(row.date).getDate(),\n  dayOfWeek: row => new Date(row.date).getDay(),  // 0 = Sunday, 6 = Saturday\n  quarter: row => Math.floor((new Date(row.date).getMonth() + 3) / 3)\n});\n\nwithComponents.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502 year \u2502 month \u2502 day \u2502 dayOfWeek\u2502 quarter \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502 2023 \u2502 1     \u2502 1   \u2502 0        \u2502 1       \u2502\n\u2502 2023-01-02 \u2502 12    \u2502 2023 \u2502 1     \u2502 2   \u2502 1        \u2502 1       \u2502\n\u2502 2023-01-03 \u2502 15    \u2502 2023 \u2502 1     \u2502 3   \u2502 2        \u2502 1       \u2502\n\u2502 2023-01-04 \u2502 14    \u2502 2023 \u2502 1     \u2502 4   \u2502 3        \u2502 1       \u2502\n\u2502 2023-01-05 \u2502 16    \u2502 2023 \u2502 1     \u2502 5   \u2502 4        \u2502 1       \u2502\n\u2502 2023-01-06 \u2502 18    \u2502 2023 \u2502 1     \u2502 6   \u2502 5        \u2502 1       \u2502\n\u2502 2023-01-07 \u2502 17    \u2502 2023 \u2502 1     \u2502 7   \u2502 6        \u2502 1       \u2502\n\u2502 2023-01-08 \u2502 19    \u2502 2023 \u2502 1     \u2502 8   \u2502 0        \u2502 1       \u2502\n\u2502 2023-01-09 \u2502 20    \u2502 2023 \u2502 1     \u2502 9   \u2502 1        \u2502 1       \u2502\n\u2502 2023-01-10 \u2502 22    \u2502 2023 \u2502 1     \u2502 10  \u2502 2        \u2502 1       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"date-arithmetic",children:"Date arithmetic"}),"\n",(0,i.jsx)(n.p,{children:"You can perform date arithmetic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Add days to dates\nconst withNextDay = timeSeriesIndexed.assign({\n  nextDay: row => {\n    const date = new Date(row.date);\n    date.setDate(date.getDate() + 1);\n    return date.toISOString().split('T')[0];\n  },\n  prevDay: row => {\n    const date = new Date(row.date);\n    date.setDate(date.getDate() - 1);\n    return date.toISOString().split('T')[0];\n  }\n});\n\nwithNextDay.head(3).print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502 nextDay    \u2502 prevDay    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502 2023-01-02 \u2502 2022-12-31 \u2502\n\u2502 2023-01-02 \u2502 12    \u2502 2023-01-03 \u2502 2023-01-01 \u2502\n\u2502 2023-01-03 \u2502 15    \u2502 2023-01-04 \u2502 2023-01-02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"time-series-analysis",children:"Time Series Analysis"}),"\n",(0,i.jsx)(n.h3,{id:"resampling",children:"Resampling"}),"\n",(0,i.jsx)(n.p,{children:"Resampling allows you to change the frequency of your time series data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Resample to weekly frequency\nconst weekly = timeSeriesIndexed.resample('W', {\n  aggregation: {\n    value: 'mean'  // Calculate mean for each week\n  }\n});\n\nweekly.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502\n\u2502 2023-01-08 \u2502 16.29 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can specify different aggregation functions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Resample with multiple aggregation functions\nconst weeklyMulti = timeSeriesIndexed.resample('W', {\n  aggregation: {\n    value: ['mean', 'min', 'max', 'sum']\n  }\n});\n\nweeklyMulti.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value_mean \u2502 value_min  \u2502 value_max  \u2502 value_sum  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10         \u2502 10         \u2502 10         \u2502 10         \u2502\n\u2502 2023-01-08 \u2502 16.29      \u2502 14         \u2502 22         \u2502 114        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"upsampling",children:"Upsampling"}),"\n",(0,i.jsx)(n.p,{children:"You can also upsample to a higher frequency:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a weekly time series\nconst weeklyData = new DataFrame({\n  date: ['2023-01-01', '2023-01-08', '2023-01-15', '2023-01-22'],\n  value: [10, 15, 20, 25]\n}).setIndex('date');\n\n// Upsample to daily frequency\nconst daily = weeklyData.resample('D', {\n  method: 'ffill'  // Forward fill missing values\n});\n\ndaily.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502\n\u2502 2023-01-02 \u2502 10    \u2502\n\u2502 2023-01-03 \u2502 10    \u2502\n\u2502 2023-01-04 \u2502 10    \u2502\n\u2502 2023-01-05 \u2502 10    \u2502\n\u2502 2023-01-06 \u2502 10    \u2502\n\u2502 2023-01-07 \u2502 10    \u2502\n\u2502 2023-01-08 \u2502 15    \u2502\n\u2502 ...        \u2502 ...   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rolling-windows",children:"Rolling windows"}),"\n",(0,i.jsx)(n.p,{children:"You can calculate statistics over a rolling window:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Calculate rolling mean with a window of 3\nconst rollingMean = timeSeriesIndexed.rolling(3).mean('value');\nconsole.log('Rolling mean:', rollingMean);\n// [null, null, 12.33, 13.67, 15, 16, 17, 18, 18.67, 20.33]\n\n// Calculate multiple rolling statistics\nconst rollingStats = timeSeriesIndexed.rolling(3).agg({\n  value: ['mean', 'std', 'min', 'max']\n});\n\nrollingStats.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value_mean \u2502 value_std  \u2502 value_min  \u2502 value_max  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 null       \u2502 null       \u2502 null       \u2502 null       \u2502\n\u2502 2023-01-02 \u2502 null       \u2502 null       \u2502 null       \u2502 null       \u2502\n\u2502 2023-01-03 \u2502 12.33      \u2502 2.52       \u2502 10         \u2502 15         \u2502\n\u2502 2023-01-04 \u2502 13.67      \u2502 1.53       \u2502 12         \u2502 15         \u2502\n\u2502 2023-01-05 \u2502 15         \u2502 1          \u2502 14         \u2502 16         \u2502\n\u2502 2023-01-06 \u2502 16         \u2502 2          \u2502 14         \u2502 18         \u2502\n\u2502 2023-01-07 \u2502 17         \u2502 1          \u2502 16         \u2502 18         \u2502\n\u2502 2023-01-08 \u2502 18         \u2502 1          \u2502 17         \u2502 19         \u2502\n\u2502 2023-01-09 \u2502 18.67      \u2502 1.53       \u2502 17         \u2502 20         \u2502\n\u2502 2023-01-10 \u2502 20.33      \u2502 1.53       \u2502 19         \u2502 22         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"expanding-windows",children:"Expanding windows"}),"\n",(0,i.jsx)(n.p,{children:"You can calculate statistics over an expanding window:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Calculate expanding mean\nconst expandingMean = timeSeriesIndexed.expanding().mean('value');\nconsole.log('Expanding mean:', expandingMean);\n// [10, 11, 12.33, 12.75, 13.4, 14.17, 14.57, 15.12, 15.67, 16.3]\n\n// Calculate multiple expanding statistics\nconst expandingStats = timeSeriesIndexed.expanding().agg({\n  value: ['mean', 'std', 'min', 'max']\n});\n\nexpandingStats.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value_mean \u2502 value_std  \u2502 value_min  \u2502 value_max  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10         \u2502 0          \u2502 10         \u2502 10         \u2502\n\u2502 2023-01-02 \u2502 11         \u2502 1.41       \u2502 10         \u2502 12         \u2502\n\u2502 2023-01-03 \u2502 12.33      \u2502 2.52       \u2502 10         \u2502 15         \u2502\n\u2502 2023-01-04 \u2502 12.75      \u2502 2.22       \u2502 10         \u2502 15         \u2502\n\u2502 2023-01-05 \u2502 13.4       \u2502 2.41       \u2502 10         \u2502 16         \u2502\n\u2502 2023-01-06 \u2502 14.17      \u2502 2.93       \u2502 10         \u2502 18         \u2502\n\u2502 2023-01-07 \u2502 14.57      \u2502 2.82       \u2502 10         \u2502 18         \u2502\n\u2502 2023-01-08 \u2502 15.12      \u2502 3.09       \u2502 10         \u2502 19         \u2502\n\u2502 2023-01-09 \u2502 15.67      \u2502 3.35       \u2502 10         \u2502 20         \u2502\n\u2502 2023-01-10 \u2502 16.3       \u2502 3.8        \u2502 10         \u2502 22         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"time-series-visualization",children:"Time Series Visualization"}),"\n",(0,i.jsx)(n.p,{children:"TinyFrameJS provides methods for visualizing time series data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Plot a time series\ntimeSeriesIndexed.plot({\n  x: 'date',\n  y: 'value',\n  type: 'line',\n  title: 'Time Series Plot',\n  xLabel: 'Date',\n  yLabel: 'Value'\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-time-series",children:"Multiple time series"}),"\n",(0,i.jsx)(n.p,{children:"You can plot multiple time series:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame with multiple time series\nconst multiSeries = new DataFrame({\n  date: [\n    '2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05',\n    '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09', '2023-01-10'\n  ],\n  series1: [10, 12, 15, 14, 16, 18, 17, 19, 20, 22],\n  series2: [8, 9, 11, 13, 15, 14, 16, 18, 17, 19],\n  series3: [5, 7, 8, 10, 12, 14, 15, 16, 18, 20]\n}).setIndex('date');\n\n// Plot multiple time series\nmultiSeries.plot({\n  x: 'date',\n  y: ['series1', 'series2', 'series3'],\n  type: 'line',\n  title: 'Multiple Time Series Plot',\n  xLabel: 'Date',\n  yLabel: 'Value'\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"seasonal-decomposition",children:"Seasonal decomposition"}),"\n",(0,i.jsx)(n.p,{children:"You can decompose a time series into trend, seasonal, and residual components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a seasonal time series\nconst seasonalData = new DataFrame({\n  date: Array.from({length: 365}, (_, i) => {\n    const date = new Date('2023-01-01');\n    date.setDate(date.getDate() + i);\n    return date.toISOString().split('T')[0];\n  }),\n  value: Array.from({length: 365}, (_, i) => {\n    // Trend component\n    const trend = 100 + i * 0.1;\n    // Seasonal component (yearly cycle)\n    const seasonal = 20 * Math.sin(2 * Math.PI * i / 365);\n    // Random noise\n    const noise = Math.random() * 5;\n    return trend + seasonal + noise;\n  })\n}).setIndex('date');\n\n// Decompose the time series\nconst decomposed = seasonalData.decompose('value', {\n  model: 'additive',\n  period: 365\n});\n\n// Plot the decomposition\ndecomposed.plot();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"time-series-forecasting",children:"Time Series Forecasting"}),"\n",(0,i.jsx)(n.h3,{id:"simple-forecasting",children:"Simple forecasting"}),"\n",(0,i.jsx)(n.p,{children:"You can perform simple forecasting using moving averages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a time series\nconst data = new DataFrame({\n  date: Array.from({length: 100}, (_, i) => {\n    const date = new Date('2023-01-01');\n    date.setDate(date.getDate() + i);\n    return date.toISOString().split('T')[0];\n  }),\n  value: Array.from({length: 100}, (_, i) => {\n    return 100 + i * 0.5 + Math.random() * 10;\n  })\n}).setIndex('date');\n\n// Split into training and test sets\nconst train = data.iloc({rows: [0, 80]});\nconst test = data.iloc({rows: [80, 100]});\n\n// Forecast using moving average\nconst forecastMA = train.forecast('value', {\n  method: 'ma',\n  steps: 20,\n  window: 7\n});\n\n// Plot the forecast\ndata.plot({\n  x: 'date',\n  y: 'value',\n  type: 'line',\n  title: 'Moving Average Forecast',\n  xLabel: 'Date',\n  yLabel: 'Value'\n});\n\nforecastMA.plot({\n  x: 'date',\n  y: 'forecast',\n  type: 'line',\n  color: 'red',\n  addTo: true\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"exponential-smoothing",children:"Exponential smoothing"}),"\n",(0,i.jsx)(n.p,{children:"You can use exponential smoothing for forecasting:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Forecast using exponential smoothing\nconst forecastES = train.forecast('value', {\n  method: 'ets',\n  steps: 20,\n  alpha: 0.3,  // Smoothing parameter\n  beta: 0.1,   // Trend parameter\n  gamma: 0.1   // Seasonal parameter\n});\n\n// Plot the forecast\ndata.plot({\n  x: 'date',\n  y: 'value',\n  type: 'line',\n  title: 'Exponential Smoothing Forecast',\n  xLabel: 'Date',\n  yLabel: 'Value'\n});\n\nforecastES.plot({\n  x: 'date',\n  y: 'forecast',\n  type: 'line',\n  color: 'red',\n  addTo: true\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-multiple-time-zones",children:"Working with Multiple Time Zones"}),"\n",(0,i.jsx)(n.p,{children:"TinyFrameJS supports working with multiple time zones:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a time series with time zone information\nconst timeZoneSeries = new DataFrame({\n  datetime: [\n    '2023-01-01T00:00:00Z',\n    '2023-01-01T01:00:00Z',\n    '2023-01-01T02:00:00Z',\n    '2023-01-01T03:00:00Z'\n  ],\n  value: [10, 12, 15, 14]\n});\n\n// Convert to a different time zone\nconst convertedSeries = timeZoneSeries.assign({\n  datetime_est: row => {\n    const date = new Date(row.datetime);\n    return new Date(date.getTime() - 5 * 60 * 60 * 1000).toISOString();\n  }\n});\n\nconvertedSeries.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 datetime            \u2502 value \u2502 datetime_est        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 2023-01-01T00:00:00Z\u2502 10    \u2502 2022-12-31T19:00:00Z\u2502\n\u2502 1     \u2502 2023-01-01T01:00:00Z\u2502 12    \u2502 2022-12-31T20:00:00Z\u2502\n\u2502 2     \u2502 2023-01-01T02:00:00Z\u2502 15    \u2502 2022-12-31T21:00:00Z\u2502\n\u2502 3     \u2502 2023-01-01T03:00:00Z\u2502 14    \u2502 2022-12-31T22:00:00Z\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"handling-missing-data-in-time-series",children:"Handling Missing Data in Time Series"}),"\n",(0,i.jsx)(n.p,{children:"Time series data often contains missing values. TinyFrameJS provides methods for handling them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a time series with missing values\nconst missingData = new DataFrame({\n  date: [\n    '2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05',\n    '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09', '2023-01-10'\n  ],\n  value: [10, null, 15, 14, null, 18, 17, null, 20, 22]\n}).setIndex('date');\n\n// Fill missing values with forward fill\nconst forwardFilled = missingData.fillna({\n  columns: ['value'],\n  method: 'ffill'\n});\n\nforwardFilled.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502\n\u2502 2023-01-02 \u2502 10    \u2502\n\u2502 2023-01-03 \u2502 15    \u2502\n\u2502 2023-01-04 \u2502 14    \u2502\n\u2502 2023-01-05 \u2502 14    \u2502\n\u2502 2023-01-06 \u2502 18    \u2502\n\u2502 2023-01-07 \u2502 17    \u2502\n\u2502 2023-01-08 \u2502 17    \u2502\n\u2502 2023-01-09 \u2502 20    \u2502\n\u2502 2023-01-10 \u2502 22    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"interpolation",children:"Interpolation"}),"\n",(0,i.jsx)(n.p,{children:"You can interpolate missing values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Interpolate missing values\nconst interpolated = missingData.interpolate({\n  columns: ['value'],\n  method: 'linear'\n});\n\ninterpolated.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2502 value \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2023-01-01 \u2502 10    \u2502\n\u2502 2023-01-02 \u2502 12.5  \u2502\n\u2502 2023-01-03 \u2502 15    \u2502\n\u2502 2023-01-04 \u2502 14    \u2502\n\u2502 2023-01-05 \u2502 16    \u2502\n\u2502 2023-01-06 \u2502 18    \u2502\n\u2502 2023-01-07 \u2502 17    \u2502\n\u2502 2023-01-08 \u2502 18.5  \u2502\n\u2502 2023-01-09 \u2502 20    \u2502\n\u2502 2023-01-10 \u2502 22    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you know how to handle time series data with TinyFrameJS, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn how to ",(0,i.jsx)(n.a,{href:"./text-processing",children:"process textual data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore how to ",(0,i.jsx)(n.a,{href:"./missing-data",children:"work with missing data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Discover how to ",(0,i.jsx)(n.a,{href:"./performance-optimization",children:"optimize performance"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3774:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6672);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);