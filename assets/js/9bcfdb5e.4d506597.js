"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[7609],{3774:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6672);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},6537:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting-started/tutorials/filtering","title":"How do I select a subset of a table?","description":"Learn how to filter rows and select columns in TinyFrameJS","source":"@site/docs/getting-started/tutorials/filtering.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/filtering","permalink":"/docs/getting-started/tutorials/filtering","draft":false,"unlisted":false,"editUrl":"https://github.com/AlphaQuantJS/tinyframejs/edit/main/docs/getting-started/tutorials/filtering.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"filtering","title":"How do I select a subset of a table?","sidebar_position":3,"description":"Learn how to filter rows and select columns in TinyFrameJS"},"sidebar":"docs","previous":{"title":"How do I read and write tabular data?","permalink":"/docs/getting-started/tutorials/io"},"next":{"title":"How to create plots in TinyFrameJS?","permalink":"/docs/getting-started/tutorials/plotting"}}');var t=s(3420),r=s(3774);const o={id:"filtering",title:"How do I select a subset of a table?",sidebar_position:3,description:"Learn how to filter rows and select columns in TinyFrameJS"},l="How do I select a subset of a table?",a={},c=[{value:"Selecting Columns",id:"selecting-columns",level:2},{value:"Using <code>select(columns, options)</code>",id:"using-selectcolumns-options",level:3},{value:"Using <code>drop(columns, options)</code>",id:"using-dropcolumns-options",level:3},{value:"Using <code>selectByPattern(pattern, options)</code>",id:"using-selectbypatternpattern-options",level:3},{value:"Filtering Rows",id:"filtering-rows",level:2},{value:"For JavaScript Lovers: <code>filter()</code>",id:"for-javascript-lovers-filter",level:3},{value:"For Modern JavaScript Lovers: <code>expr$()</code>",id:"for-modern-javascript-lovers-expr",level:3},{value:"For SQL Lovers: <code>query()</code>",id:"for-sql-lovers-query",level:3},{value:"For Point Filtering: <code>where()</code>",id:"for-point-filtering-where",level:3},{value:"Selecting by Index",id:"selecting-by-index",level:2},{value:"Using <code>at()</code>",id:"using-at",level:3},{value:"Using <code>iloc(rowIndices, columnIndices, options)</code>",id:"using-ilocrowindices-columnindices-options",level:3},{value:"Using <code>loc(rowLabels, columnLabels, options)</code>",id:"using-locrowlabels-columnlabels-options",level:3},{value:"Sampling Data",id:"sampling-data",level:2},{value:"Using <code>head(n, options)</code>",id:"using-headn-options",level:3},{value:"Using <code>tail(n, options)</code>",id:"using-tailn-options",level:3},{value:"Using <code>sample(n, options)</code>",id:"using-samplen-options",level:3},{value:"Using <code>stratifiedSample(column, n, options)</code>",id:"using-stratifiedsamplecolumn-n-options",level:3},{value:"Additional Options",id:"additional-options",level:2},{value:"Preserving Typed Arrays",id:"preserving-typed-arrays",level:2},{value:"Metadata in Filtering Results",id:"metadata-in-filtering-results",level:2},{value:"Method Chaining",id:"method-chaining",level:2},{value:"Choosing the Right Filtering Method",id:"choosing-the-right-filtering-method",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-do-i-select-a-subset-of-a-table",children:"How do I select a subset of a table?"})}),"\n",(0,t.jsx)(n.p,{children:"One of the most common operations in data analysis is selecting a subset of your data. TinyFrameJS provides several methods for filtering rows and selecting columns."}),"\n",(0,t.jsx)(n.h1,{id:"filtering-methods-in-tinyframejs",children:"Filtering Methods in TinyFrameJS"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS provides numerous methods for filtering and selecting data, suitable for different programming styles. The library is designed to be as flexible as JavaScript itself, while offering syntax familiar to users of Pandas, SQL, and other data analysis systems."}),"\n",(0,t.jsx)(n.h2,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,t.jsxs)(n.h3,{id:"using-selectcolumns-options",children:["Using ",(0,t.jsx)(n.code,{children:"select(columns, options)"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"select()"})," method allows you to choose specific columns from a DataFrame:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst df = new DataFrame([\n  {name: 'Alice', age: 25, city: 'New York', salary: 70000},\n  {name: 'Bob', age: 30, city: 'San Francisco', salary: 85000},\n  {name: 'Charlie', age: 35, city: 'Chicago', salary: 90000}\n]);\n\n// Select specific columns\nconst nameAndAge = df.select(['name', 'age']);\nnameAndAge.print();\n\n// Select columns without automatic output\ndf.select(['name', 'age'], { print: false });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-dropcolumns-options",children:["Using ",(0,t.jsx)(n.code,{children:"drop(columns, options)"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"drop()"})," method allows you to remove specific columns:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Drop specific columns\nconst withoutCityAndSalary = df.drop(['city', 'salary']);\nwithoutCityAndSalary.print();\n\n// Drop columns without automatic output\ndf.drop(['city'], { print: false });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-selectbypatternpattern-options",children:["Using ",(0,t.jsx)(n.code,{children:"selectByPattern(pattern, options)"})]}),"\n",(0,t.jsx)(n.p,{children:"You can also select columns using patterns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Select columns that start with 'a'\nconst aColumns = df.selectByPattern('^a');\naColumns.print();\n\n// Select columns containing 'a' without automatic output\ndf.selectByPattern('a', { print: false });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 age \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 25  \u2502\n\u2502   1   \u2502 30  \u2502\n\u2502   2   \u2502 35  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"filtering-rows",children:"Filtering Rows"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS offers several ways to filter rows to accommodate different user preferences."}),"\n",(0,t.jsxs)(n.h3,{id:"for-javascript-lovers-filter",children:["For JavaScript Lovers: ",(0,t.jsx)(n.code,{children:"filter()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"filter()"})," method uses the standard JavaScript approach with a predicate function, making it familiar to JavaScript developers:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Filter rows where age is greater than 25\nconst olderThan25 = df.filter(row => row.age > 25);\nolderThan25.print();\n\n// Complex conditions\nconst olderAndHighPaid = df.filter(row => row.age > 25 && row.salary > 85000);\nolderAndHighPaid.print();\n\n// Without automatic output\ndf.filter(row => row.city === 'New York', { print: false });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 city          \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 San Francisco \u2502 85000  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 Chicago       \u2502 90000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"for-modern-javascript-lovers-expr",children:["For Modern JavaScript Lovers: ",(0,t.jsx)(n.code,{children:"expr$()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"expr$()"})," method uses tagged template literals for an intuitive and expressive syntax:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// Filter rows where age is greater than 30\ndf.expr$`age > 30`;\n\n// Complex conditions\ndf.expr$`age > 25 && salary > 80000`;\n\n// String operations\ndf.expr$`city_includes("Francisco")`;\ndf.expr$`name_startsWith("A")`;\n\n// Using variables\nconst minAge = 30;\ndf.expr$`age >= ${minAge}`;\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"for-sql-lovers-query",children:["For SQL Lovers: ",(0,t.jsx)(n.code,{children:"query()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"query()"})," method allows you to filter rows using a SQL-like syntax:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// Filter using a SQL-like query\nconst fromNewYork = df.query("city == \'New York\'");\nfromNewYork.print();\n\n// Complex SQL-like conditions\ndf.query("age > 30 AND salary > 80000");\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name  \u2502 age \u2502 city     \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice \u2502 25  \u2502 New York \u2502 70000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"for-point-filtering-where",children:["For Point Filtering: ",(0,t.jsx)(n.code,{children:"where()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"where()"})," method allows you to filter rows using column-wise conditions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Filter using column conditions\nconst highSalary = df.where('salary', '>', 80000);\nhighSalary.print();\n\n// Filter rows with a specific city\ndf.where('city', '==', 'Chicago');\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 city          \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 San Francisco \u2502 85000  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 Chicago       \u2502 90000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can chain multiple conditions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Chain multiple conditions\nconst filtered = df\n  .where('age', '>=', 30)\n  .where('city', '!=', 'Chicago');\n\nfiltered.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name\u2502 age \u2502 city          \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   1   \u2502 Bob \u2502 30  \u2502 San Francisco \u2502 85000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"selecting-by-index",children:"Selecting by Index"}),"\n",(0,t.jsxs)(n.h3,{id:"using-at",children:["Using ",(0,t.jsx)(n.code,{children:"at()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"at()"})," method allows you to select a row by its index:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Get a single row by index\nconst firstRow = df.at(0);\nconsole.log(firstRow);\n// Output: {name: 'Alice', age: 25, city: 'New York', salary: 70000}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-ilocrowindices-columnindices-options",children:["Using ",(0,t.jsx)(n.code,{children:"iloc(rowIndices, columnIndices, options)"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"iloc()"})," method allows you to select rows and columns by their integer positions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Select rows 0 and 2, columns 1 and 3\nconst subset = df.iloc([0, 2], [1, 3]);\nsubset.print();\n\n// Select first three rows\ndf.iloc([0, 1, 2]);\n\n// Select without automatic output\ndf.iloc([0, 1], null, { print: false });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 age \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 25  \u2502 70000  \u2502\n\u2502   2   \u2502 35  \u2502 90000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-locrowlabels-columnlabels-options",children:["Using ",(0,t.jsx)(n.code,{children:"loc(rowLabels, columnLabels, options)"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"loc()"})," method allows you to select rows and columns by their labels:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Select rows with index 0 and 2, columns 'age' and 'salary'\nconst subset = df.loc([0, 2], ['age', 'salary']);\nsubset.print();\n\n// Select rows with specific index values\ndf.loc([1, 3, 5]);\n\n// Select rows and specific columns\ndf.loc([1, 3, 5], ['name', 'salary']);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 age \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 25  \u2502 70000  \u2502\n\u2502   2   \u2502 35  \u2502 90000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sampling-data",children:"Sampling Data"}),"\n",(0,t.jsxs)(n.h3,{id:"using-headn-options",children:["Using ",(0,t.jsx)(n.code,{children:"head(n, options)"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"head()"})," method allows you to get the first N rows of a DataFrame:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Get the first 5 rows (default)\nconst firstRows = df.head();\nfirstRows.print();\n\n// Get the first 3 rows\nconst firstThreeRows = df.head(3);\nfirstThreeRows.print();\n\n// Without automatic output\ndf.head(5, { print: false });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 city     \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 New York \u2502 70000  \u2502\n\u2502   1   \u2502 Bob     \u2502 30  \u2502 Boston   \u2502 85000  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 Chicago  \u2502 92000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-tailn-options",children:["Using ",(0,t.jsx)(n.code,{children:"tail(n, options)"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"tail()"})," method allows you to get the last N rows of a DataFrame:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Get the last 5 rows (default)\nconst lastRows = df.tail();\nlastRows.print();\n\n// Get the last 2 rows\nconst lastTwoRows = df.tail(2);\nlastTwoRows.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name\u2502 age \u2502 city    \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   8   \u2502 Ivan\u2502 65  \u2502 Miami   \u2502 88000  \u2502\n\u2502   9   \u2502 Judy\u2502 70  \u2502 Atlanta \u2502 82000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-samplen-options",children:["Using ",(0,t.jsx)(n.code,{children:"sample(n, options)"})]}),"\n",(0,t.jsx)(n.p,{children:"You can select a random sample of rows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Get a random sample of 2 rows\nconst sample = df.sample(2);\nsample.print();\n\n// With seed for reproducibility\ndf.sample(5, { seed: 123 });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output (will vary):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 city          \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Alice   \u2502 25  \u2502 New York      \u2502 70000  \u2502\n\u2502   2   \u2502 Charlie \u2502 35  \u2502 Chicago       \u2502 90000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"using-stratifiedsamplecolumn-n-options",children:["Using ",(0,t.jsx)(n.code,{children:"stratifiedSample(column, n, options)"})]}),"\n",(0,t.jsx)(n.p,{children:"You can also perform stratified sampling, which maintains the proportion of values in a specific column:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Get a stratified sample based on the 'city' column\nconst stratifiedSample = df.stratifiedSample('city', 0.5);\nstratifiedSample.print();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"additional-options",children:"Additional Options"}),"\n",(0,t.jsxs)(n.p,{children:["Most filtering methods accept an optional ",(0,t.jsx)(n.code,{children:"options"})," parameter that allows you to customize the behavior of the method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Disable automatic output of results\nconst filteredData = df.filter(row => row.age > 30, { print: false });\n\n// Later you can manually print the result\nfilteredData.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Available options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"print"}),": if false, the result will not be automatically printed to the console (default is true)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"preserving-typed-arrays",children:"Preserving Typed Arrays"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS automatically preserves typed arrays (Float64Array, Int32Array) when creating filtered DataFrames. This ensures efficient work with numerical data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Create a DataFrame with typed arrays\nconst typedDf = new DataFrame({\n  values: new Float64Array([1.1, 2.2, 3.3, 4.4, 5.5]),\n  indices: new Int32Array([10, 20, 30, 40, 50])\n});\n\n// Filter the data\nconst filteredTyped = typedDf.filter(row => row.values > 3);\n\n// Result preserves typed arrays\nconsole.log(filteredTyped.columns.values instanceof Float64Array); // true\nconsole.log(filteredTyped.columns.indices instanceof Int32Array); // true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"metadata-in-filtering-results",children:"Metadata in Filtering Results"}),"\n",(0,t.jsx)(n.p,{children:"All filtering methods preserve important metadata:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const filtered = df.filter(row => row.age > 30);\n\n// Access metadata\nconsole.log(`Row count: ${filtered.rowCount}`);\nconsole.log(`Column names: ${filtered.columnNames.join(', ')}`);\nconsole.log(`Data types:`, filtered.dtypes);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"method-chaining",children:"Method Chaining"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS supports method chaining for convenient data processing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Chain operations\nconst result = df\n  .filter(row => row.age > 25)\n  .select(['name', 'salary'])\n  .sort('salary')\n  .head(3);\n\nresult.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 Bob     \u2502 85000  \u2502\n\u2502   1   \u2502 Charlie \u2502 92000  \u2502\n\u2502   2   \u2502 David   \u2502 105000 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"choosing-the-right-filtering-method",children:"Choosing the Right Filtering Method"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS offers different filtering methods to accommodate various preferences:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"filter()"}),": For those who prefer standard JavaScript and functional programming"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"expr$()"}),": For those who value modern and expressive JavaScript syntax"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"query()"}),": For those who prefer SQL-like syntax"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"where()"}),": For simple filtering conditions on a single column"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The choice of method depends on your preferences and specific task. All methods provide the same functionality but with different syntax."}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Now that you know how to select subsets of your data, you can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Learn how to ",(0,t.jsx)(n.a,{href:"./plotting",children:"create plots from your data"})]}),"\n",(0,t.jsxs)(n.li,{children:["Explore how to ",(0,t.jsx)(n.a,{href:"./derived-columns",children:"create derived columns"})]}),"\n",(0,t.jsxs)(n.li,{children:["Discover how to ",(0,t.jsx)(n.a,{href:"./statistics",children:"calculate summary statistics"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);