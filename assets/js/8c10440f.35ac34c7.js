"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[3953],{3774:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var i=a(6672);const r={},s=i.createContext(r);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},7567:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"getting-started/comparison/sql","title":"Comparison with SQL","description":"Compare TinyFrameJS with SQL for data manipulation","source":"@site/docs/getting-started/comparison/sql.md","sourceDirName":"getting-started/comparison","slug":"/getting-started/comparison/sql","permalink":"/docs/getting-started/comparison/sql","draft":false,"unlisted":false,"editUrl":"https://github.com/tinyframejs/tinyframejs/edit/main/docs/getting-started/comparison/sql.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"sql","title":"Comparison with SQL","sidebar_position":2,"description":"Compare TinyFrameJS with SQL for data manipulation"},"sidebar":"docs","previous":{"title":"Comparison with R","permalink":"/docs/getting-started/comparison/r"},"next":{"title":"Comparison with Spreadsheets","permalink":"/docs/getting-started/comparison/spreadsheets"}}');var r=a(3420),s=a(3774);const t={id:"sql",title:"Comparison with SQL",sidebar_position:2,description:"Compare TinyFrameJS with SQL for data manipulation"},l="Comparison with SQL",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Syntax Comparison",id:"syntax-comparison",level:2},{value:"Creating Data",id:"creating-data",level:3},{value:"Filtering Data",id:"filtering-data",level:3},{value:"Selecting Columns",id:"selecting-columns",level:3},{value:"Aggregation",id:"aggregation",level:3},{value:"Joining Data",id:"joining-data",level:3},{value:"When to Use TinyFrameJS vs. SQL",id:"when-to-use-tinyframejs-vs-sql",level:2},{value:"Choose TinyFrameJS when:",id:"choose-tinyframejs-when",level:3},{value:"Choose SQL when:",id:"choose-sql-when",level:3},{value:"Interoperability",id:"interoperability",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Learning Curve",id:"learning-curve",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"comparison-with-sql",children:"Comparison with SQL"})}),"\n",(0,r.jsx)(n.p,{children:"SQL (Structured Query Language) is a standard language for managing and manipulating relational databases. This page compares TinyFrameJS with SQL, highlighting similarities, differences, and use cases for each."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"TinyFrameJS"}),(0,r.jsx)(n.th,{children:"SQL"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Primary use"})}),(0,r.jsx)(n.td,{children:"In-memory data manipulation in JavaScript"}),(0,r.jsx)(n.td,{children:"Database querying and management"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Environment"})}),(0,r.jsx)(n.td,{children:"Browser, Node.js"}),(0,r.jsx)(n.td,{children:"Database servers, embedded systems"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Data structure"})}),(0,r.jsx)(n.td,{children:"DataFrame objects"}),(0,r.jsx)(n.td,{children:"Tables in relational databases"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Learning curve"})}),(0,r.jsx)(n.td,{children:"Moderate for JavaScript developers"}),(0,r.jsx)(n.td,{children:"Moderate, widely taught"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Performance"})}),(0,r.jsx)(n.td,{children:"Optimized for in-memory operations"}),(0,r.jsx)(n.td,{children:"Optimized for disk-based operations and indexing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Integration"})}),(0,r.jsx)(n.td,{children:"Seamless with web applications"}),(0,r.jsx)(n.td,{children:"Requires database connection"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"syntax-comparison",children:"Syntax Comparison"}),"\n",(0,r.jsx)(n.h3,{id:"creating-data",children:"Creating Data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TinyFrameJS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { DataFrame } from 'tinyframejs';\n\n// Create a DataFrame\nconst employees = new DataFrame([\n  {id: 1, name: 'Alice', department: 'Engineering', salary: 75000},\n  {id: 2, name: 'Bob', department: 'Marketing', salary: 65000},\n  {id: 3, name: 'Charlie', department: 'Engineering', salary: 80000},\n  {id: 4, name: 'David', department: 'Sales', salary: 70000}\n]);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SQL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create a table\nCREATE TABLE employees (\n  id INT PRIMARY KEY,\n  name VARCHAR(100),\n  department VARCHAR(100),\n  salary INT\n);\n\n-- Insert data\nINSERT INTO employees (id, name, department, salary) VALUES\n  (1, 'Alice', 'Engineering', 75000),\n  (2, 'Bob', 'Marketing', 65000),\n  (3, 'Charlie', 'Engineering', 80000),\n  (4, 'David', 'Sales', 70000);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"filtering-data",children:"Filtering Data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TinyFrameJS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Filter employees in Engineering department\nconst engineers = employees.filter(row => row.department === 'Engineering');\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SQL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Filter employees in Engineering department\nSELECT * FROM employees WHERE department = 'Engineering';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TinyFrameJS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Select specific columns\nconst nameAndSalary = employees.select(['name', 'salary']);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SQL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Select specific columns\nSELECT name, salary FROM employees;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"aggregation",children:"Aggregation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TinyFrameJS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Calculate average salary by department\nconst avgSalaryByDept = employees\n  .groupby('department')\n  .agg({\n    salary: 'mean'\n  });\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SQL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Calculate average salary by department\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"joining-data",children:"Joining Data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TinyFrameJS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Create a second DataFrame\nconst departments = new DataFrame([\n  {dept_id: 'Engineering', location: 'Building A'},\n  {dept_id: 'Marketing', location: 'Building B'},\n  {dept_id: 'Sales', location: 'Building C'}\n]);\n\n// Join employees with departments\nconst employeesWithLocation = employees.merge(departments, {\n  left_on: 'department',\n  right_on: 'dept_id'\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SQL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create a departments table\nCREATE TABLE departments (\n  dept_id VARCHAR(100) PRIMARY KEY,\n  location VARCHAR(100)\n);\n\nINSERT INTO departments (dept_id, location) VALUES\n  ('Engineering', 'Building A'),\n  ('Marketing', 'Building B'),\n  ('Sales', 'Building C');\n\n-- Join employees with departments\nSELECT e.*, d.location\nFROM employees e\nJOIN departments d ON e.department = d.dept_id;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use-tinyframejs-vs-sql",children:"When to Use TinyFrameJS vs. SQL"}),"\n",(0,r.jsx)(n.h3,{id:"choose-tinyframejs-when",children:"Choose TinyFrameJS when:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You're working in a JavaScript/web environment"}),"\n",(0,r.jsx)(n.li,{children:"You need to manipulate data in memory"}),"\n",(0,r.jsx)(n.li,{children:"Your data processing needs to happen client-side"}),"\n",(0,r.jsx)(n.li,{children:"You're working with moderate-sized datasets"}),"\n",(0,r.jsx)(n.li,{children:"You need to perform complex transformations on data"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"choose-sql-when",children:"Choose SQL when:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You're working with large datasets that don't fit in memory"}),"\n",(0,r.jsx)(n.li,{children:"You need persistent data storage"}),"\n",(0,r.jsx)(n.li,{children:"You require transaction support"}),"\n",(0,r.jsx)(n.li,{children:"You need to enforce data integrity constraints"}),"\n",(0,r.jsx)(n.li,{children:"You're performing operations on a database"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interoperability",children:"Interoperability"}),"\n",(0,r.jsx)(n.p,{children:"TinyFrameJS can work well with SQL databases:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Read data from SQL database\nconst employees = await DataFrame.readSql({\n  connection: dbConnection,\n  query: 'SELECT * FROM employees'\n});\n\n// Process data in TinyFrameJS\nconst processedData = employees\n  .filter(row => row.salary > 70000)\n  .groupby('department')\n  .agg({\n    salary: ['mean', 'max', 'min']\n  });\n\n// Write results back to SQL\nawait processedData.toSql({\n  connection: dbConnection,\n  tableName: 'salary_analysis',\n  ifExists: 'replace'\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SQL databases are optimized for disk-based operations and can handle very large datasets"}),"\n",(0,r.jsx)(n.li,{children:"TinyFrameJS is optimized for in-memory operations and is typically faster for smaller datasets"}),"\n",(0,r.jsx)(n.li,{children:"SQL excels at indexed lookups and joins on large tables"}),"\n",(0,r.jsx)(n.li,{children:"TinyFrameJS is better for complex transformations and interactive analysis"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"learning-curve",children:"Learning Curve"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you're already familiar with JavaScript, TinyFrameJS will be easier to learn"}),"\n",(0,r.jsx)(n.li,{children:"SQL has a standardized syntax that is widely taught and used"}),"\n",(0,r.jsx)(n.li,{children:"TinyFrameJS methods are designed to be similar to SQL operations, making the transition easier"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"TinyFrameJS and SQL serve different but complementary purposes in the data ecosystem. TinyFrameJS excels at in-memory data manipulation in JavaScript environments, while SQL is the standard for persistent data storage and querying in relational databases. Many applications use both: SQL for data storage and retrieval, and TinyFrameJS for client-side processing and visualization."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);