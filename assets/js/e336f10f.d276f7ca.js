"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[4045],{3774:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6672);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},7619:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"getting-started/tutorials/io","title":"How do I read and write tabular data?","description":"Learn how to import and export data in various formats with TinyFrameJS","source":"@site/docs/getting-started/tutorials/io.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/io","permalink":"/tinyframejs/docs/getting-started/tutorials/io","draft":false,"unlisted":false,"editUrl":"https://github.com/tinyframejs/tinyframejs/edit/main/docs/getting-started/tutorials/io.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"io","title":"How do I read and write tabular data?","sidebar_position":2,"description":"Learn how to import and export data in various formats with TinyFrameJS"},"sidebar":"docs","previous":{"title":"DataFrame Basics","permalink":"/tinyframejs/docs/getting-started/tutorials/dataframe-basics"},"next":{"title":"How do I select a subset of a table?","permalink":"/tinyframejs/docs/getting-started/tutorials/filtering"}}');var r=a(3420),i=a(3774);const s={id:"io",title:"How do I read and write tabular data?",sidebar_position:2,description:"Learn how to import and export data in various formats with TinyFrameJS"},o="How do I read and write tabular data?",d={},l=[{value:"Reading Data",id:"reading-data",level:2},{value:"Reading from CSV",id:"reading-from-csv",level:3},{value:"Reading from TSV",id:"reading-from-tsv",level:3},{value:"Reading from JSON",id:"reading-from-json",level:3},{value:"Reading from Excel",id:"reading-from-excel",level:3},{value:"Reading from array of objects",id:"reading-from-array-of-objects",level:3},{value:"Reading from column object",id:"reading-from-column-object",level:3},{value:"Writing Data",id:"writing-data",level:2},{value:"Writing to CSV",id:"writing-to-csv",level:3},{value:"Writing to JSON",id:"writing-to-json",level:3},{value:"Writing to Excel",id:"writing-to-excel",level:3},{value:"Converting to string",id:"converting-to-string",level:3},{value:"Data Conversion",id:"data-conversion",level:2},{value:"Streaming Processing of Large Files",id:"streaming-processing-of-large-files",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"how-do-i-read-and-write-tabular-data",children:"How do I read and write tabular data?"})}),"\n",(0,r.jsx)(n.p,{children:"TinyFrameJS provides a variety of functions for reading data from different sources and writing data to different formats. This section covers the most common input/output operations."}),"\n",(0,r.jsx)("div",{align:"center",children:(0,r.jsx)("img",{src:"/tinyframejs/img/io.png",alt:"TinyFrameJS I/O Operations",width:"25%"})}),"\n",(0,r.jsx)(n.h2,{id:"reading-data",children:"Reading Data"}),"\n",(0,r.jsx)(n.h3,{id:"reading-from-csv",children:"Reading from CSV"}),"\n",(0,r.jsxs)(n.p,{children:["CSV (Comma-Separated Values) is one of the most common formats for tabular data. TinyFrameJS provides the ",(0,r.jsx)(n.code,{children:"readCsv"})," function for reading CSV files:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { readCsv } from 'tinyframejs/io/readers';\n\n// Asynchronous reading from a CSV file\nconst df = await readCsv('data.csv');\n\n// Reading from a URL\nconst dfFromUrl = await readCsv('https://example.com/data.csv');\n\n// Reading from a File object (in browser)\nconst fileInput = document.getElementById('fileInput');\nconst file = fileInput.files[0];\nconst dfFromFile = await readCsv(file);\n\n// With additional options\nconst dfWithOptions = await readCsv('data.csv', {\n  delimiter: ';',             // Delimiter (default ',')\n  header: true,               // Use first row as header (default true)\n  skipRows: 2,                // Skip first N rows (default 0)\n  parseNumbers: true,         // Automatically convert numbers (default true)\n  parseDates: true,           // Automatically convert dates (default true)\n  dateFormat: 'YYYY-MM-DD',   // Date format (default auto-detection)\n  encoding: 'utf-8'           // File encoding (default 'utf-8')\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can also use the DataFrame class method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst df = await DataFrame.readCsv('data.csv');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reading-from-tsv",children:"Reading from TSV"}),"\n",(0,r.jsxs)(n.p,{children:["TSV (Tab-Separated Values) is similar to CSV but uses tabs as delimiters. TinyFrameJS provides the ",(0,r.jsx)(n.code,{children:"readTsv"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { readTsv } from 'tinyframejs/io/readers';\n\n// Asynchronous reading from a TSV file\nconst df = await readTsv('data.tsv');\n\n// Reading from a URL\nconst dfFromUrl = await readTsv('https://example.com/data.tsv');\n\n// With options (similar to readCsv)\nconst dfWithOptions = await readTsv('data.tsv', {\n  header: true,\n  skipRows: 1,\n  parseNumbers: true,\n  parseDates: true\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame class method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst df = await DataFrame.readTsv('data.tsv');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reading-from-json",children:"Reading from JSON"}),"\n",(0,r.jsx)(n.p,{children:"JSON is a popular format for data exchange. TinyFrameJS can read JSON files with various structures:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { readJson } from 'tinyframejs/io/readers';\n\n// Reading from a JSON file\nconst df = await readJson('data.json');\n\n// Reading from a URL\nconst dfFromUrl = await readJson('https://example.com/data.json');\n\n// Reading from a File object (in browser)\nconst fileInput = document.getElementById('fileInput');\nconst file = fileInput.files[0];\nconst dfFromFile = await readJson(file);\n\n// With options\nconst dfWithOptions = await readJson('data.json', {\n  recordPath: 'data.records',  // Path to the records array in JSON\n  orientation: 'records'       // JSON format: 'records', 'columns', 'split', 'index'\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame class method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst df = await DataFrame.readJson('data.json');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reading-from-excel",children:"Reading from Excel"}),"\n",(0,r.jsx)(n.p,{children:"TinyFrameJS uses the exceljs library for working with Excel files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { readExcel } from 'tinyframejs/io/readers';\n\n// Reading from an Excel file\nconst df = await readExcel('data.xlsx');\n\n// Reading from a File object (in browser)\nconst fileInput = document.getElementById('fileInput');\nconst file = fileInput.files[0];\nconst dfFromFile = await readExcel(file);\n\n// With options\nconst dfWithOptions = await readExcel('data.xlsx', {\n  sheet: 'Sheet1',           // Sheet name (default first sheet)\n  header: true,              // Use first row as header (default true)\n  skipRows: 0                // Skip first N rows (default 0)\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame class method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst df = await DataFrame.readExcel('data.xlsx', { sheet: 'Data' });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reading-from-array-of-objects",children:"Reading from array of objects"}),"\n",(0,r.jsx)(n.p,{children:"You can create a DataFrame directly from a JavaScript array of objects:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst data = [\n  { date: '2023-01-01', price: 100, volume: 1000 },\n  { date: '2023-01-02', price: 105, volume: 1500 },\n  { date: '2023-01-03', price: 102, volume: 1200 }\n];\n\nconst df = DataFrame.create(data);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reading-from-column-object",children:"Reading from column object"}),"\n",(0,r.jsx)(n.p,{children:"You can also create a DataFrame from an object where keys are column names and values are data arrays:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\nconst data = {\n  date: ['2023-01-01', '2023-01-02', '2023-01-03'],\n  price: [100, 105, 102],\n  volume: [1000, 1500, 1200]\n};\n\nconst df = DataFrame.create(data);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"writing-data",children:"Writing Data"}),"\n",(0,r.jsx)(n.h3,{id:"writing-to-csv",children:"Writing to CSV"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { writeCsv } from 'tinyframejs/io/writers';\n\n// Writing DataFrame to a CSV file\nawait writeCsv(df, 'output.csv');\n\n// With options\nawait writeCsv(df, 'output.csv', {\n  delimiter: ';',             // Delimiter (default ',')\n  header: true,               // Include header (default true)\n  index: false,               // Include index (default false)\n  encoding: 'utf-8',          // File encoding (default 'utf-8')\n  dateFormat: 'YYYY-MM-DD'    // Date format (default ISO)\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Writing to CSV via DataFrame method\nawait df.toCsv('output.csv');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"writing-to-json",children:"Writing to JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { writeJson } from 'tinyframejs/io/writers';\n\n// Writing DataFrame to a JSON file\nawait writeJson(df, 'output.json');\n\n// With options\nawait writeJson(df, 'output.json', {\n  orientation: 'records',     // JSON format: 'records', 'columns', 'split', 'index'\n  indent: 2,                  // Indentation for formatting (default 2)\n  dateFormat: 'ISO'           // Date format (default ISO)\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Writing to JSON via DataFrame method\nawait df.toJson('output.json');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"writing-to-excel",children:"Writing to Excel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { writeExcel } from 'tinyframejs/io/writers';\n\n// Writing DataFrame to an Excel file\nawait writeExcel(df, 'output.xlsx');\n\n// With options\nawait writeExcel(df, 'output.xlsx', {\n  sheet: 'Data',              // Sheet name (default 'Sheet1')\n  header: true,               // Include header (default true)\n  index: false,               // Include index (default false)\n  startCell: 'A1',            // Starting cell (default 'A1')\n  dateFormat: 'YYYY-MM-DD'    // Date format (default ISO)\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Writing to Excel via DataFrame method\nawait df.toExcel('output.xlsx');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"converting-to-string",children:"Converting to string"}),"\n",(0,r.jsx)(n.p,{children:"For debugging or console output, you can convert a DataFrame to a string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { toString } from 'tinyframejs/methods/display';\n\n// Converting DataFrame to string\nconst str = toString(df);\n\n// With options\nconst strWithOptions = toString(df, {\n  maxRows: 10,               // Maximum number of rows (default 10)\n  maxCols: 5,                // Maximum number of columns (default all)\n  precision: 2,              // Precision for floating-point numbers (default 2)\n  includeIndex: true         // Include index (default true)\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DataFrame method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Converting to string via DataFrame method\nconst str = df.toString();\n\n// Console output\nconsole.log(df.toString());\n"})}),"\n",(0,r.jsx)(n.h2,{id:"data-conversion",children:"Data Conversion"}),"\n",(0,r.jsx)(n.p,{children:"When reading data, TinyFrameJS automatically converts it to an optimized TinyFrame structure:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"String data is stored as regular JavaScript arrays"}),"\n",(0,r.jsx)(n.li,{children:"Numeric data is converted to Float64Array for efficient storage and calculations"}),"\n",(0,r.jsx)(n.li,{children:"Integer data is converted to Int32Array"}),"\n",(0,r.jsx)(n.li,{children:"Dates are converted to Date objects or stored in a special format for efficient time series operations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This process happens automatically and ensures optimal performance when working with data."}),"\n",(0,r.jsx)(n.h2,{id:"streaming-processing-of-large-files",children:"Streaming Processing of Large Files"}),"\n",(0,r.jsx)(n.p,{children:"For working with files that don't fit in memory, TinyFrameJS provides StreamingFrame:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { StreamingFrame } from 'tinyframejs';\n\n// Creating a StreamingFrame for a large CSV file\nconst streaming = new StreamingFrame({\n  source: 'large-data.csv',\n  format: 'csv',\n  chunkSize: 10000,  // Chunk size in rows\n  options: {\n    delimiter: ',',\n    header: true\n  }\n});\n\n// Processing file in chunks\nlet total = 0;\nawait streaming.process(chunk => {\n  // chunk is a DataFrame with a portion of data\n  total += chunk.sum('value');\n  return null; // Return null if you don't need to save the result\n});\n\nconsole.log(`Total sum: ${total}`);\n\n// Or collecting results\nconst result = await streaming.process(chunk => {\n  // Filter and aggregate each chunk\n  return chunk.filter(row => row.value > 100).mean('price');\n});\n\nconsole.log(`Mean values by chunk: ${result}`);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"TinyFrameJS provides flexible and efficient tools for reading and writing tabular data in various formats. Thanks to the optimized TinyFrame data structure, input/output operations are performed quickly and with minimal memory usage."}),"\n",(0,r.jsx)(n.p,{children:"For more complex scenarios, such as processing large files or streaming data processing, TinyFrameJS offers specialized tools like StreamingFrame."}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you know how to read and write data with TinyFrameJS, you can:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"./filtering",children:"filtering and selecting data"})]}),"\n",(0,r.jsxs)(n.li,{children:["Explore how to ",(0,r.jsx)(n.a,{href:"./plotting",children:"create plots from your data"})]}),"\n",(0,r.jsxs)(n.li,{children:["Discover how to ",(0,r.jsx)(n.a,{href:"./derived-columns",children:"create derived columns"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);