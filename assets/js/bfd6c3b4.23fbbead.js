"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[4861],{3774:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6672);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},7002:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api/functions/apiToFrame","title":"apiToFrame","description":"tinyframejs","source":"@site/docs/api/functions/apiToFrame.md","sourceDirName":"api/functions","slug":"/api/functions/apiToFrame","permalink":"/docs/api/functions/apiToFrame","draft":false,"unlisted":false,"editUrl":"https://github.com/AlphaQuantJS/tinyframejs/edit/main/docs/api/functions/apiToFrame.md","tags":[],"version":"current","frontMatter":{}}');var s=r(3420),l=r(3774);const a={},c=void 0,d={},o=[{value:"Parameters",id:"parameters",level:2},{value:"apiData",id:"apidata",level:3},{value:"options",id:"options",level:3},{value:"clean?",id:"clean",level:4},{value:"clean.booleanFields?",id:"cleanbooleanfields",level:4},{value:"clean.customCleaner?",id:"cleancustomcleaner",level:4},{value:"clean.dateField?",id:"cleandatefield",level:4},{value:"clean.numericFields?",id:"cleannumericfields",level:4},{value:"clean.removeEmptyStrings?",id:"cleanremoveemptystrings",level:4},{value:"clean.removeFields?",id:"cleanremovefields",level:4},{value:"clean.removeNulls?",id:"cleanremovenulls",level:4},{value:"clean.renameFields?",id:"cleanrenamefields",level:4},{value:"clean.stringFields?",id:"cleanstringfields",level:4},{value:"clean.trimStrings?",id:"cleantrimstrings",level:4},{value:"cleanFirst?",id:"cleanfirst",level:4},{value:"copy?",id:"copy",level:4},{value:"dataPath?",id:"datapath",level:4},{value:"mapping?",id:"mapping",level:4},{value:"postClean?",id:"postclean",level:4},{value:"saveRawData?",id:"saverawdata",level:4},{value:"transform?",id:"transform",level:4},{value:"useTypedArrays?",id:"usetypedarrays",level:4},{value:"Returns",id:"returns",level:2}];function t(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",strong:"strong",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/api/",children:(0,s.jsx)(n.strong,{children:"tinyframejs"})})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/api/",children:"tinyframejs"})," / apiToFrame"]}),"\n",(0,s.jsx)(n.h1,{id:"function-apitoframe",children:"Function: apiToFrame()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"apiToFrame"}),"(",(0,s.jsx)(n.code,{children:"apiData"}),", ",(0,s.jsx)(n.code,{children:"options"}),"): ",(0,s.jsx)(n.a,{href:"/docs/api/classes/DataFrame",children:(0,s.jsx)(n.code,{children:"DataFrame"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Defined in: ",(0,s.jsx)(n.a,{href:"https://github.com/AlphaQuantJS/tinyframejs/blob/774ec19a646fb36d00f0c4a06bec916acd1a47d8/src/io/transformers/apiToFrame.js#L254",children:"io/transformers/apiToFrame.js:254"})]}),"\n",(0,s.jsx)(n.p,{children:"Transforms API response data into a DataFrame\nHandles various API response formats and normalizes them"}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"apidata",children:"apiData"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"any"})}),"\n",(0,s.jsx)(n.p,{children:"API data to transform"}),"\n",(0,s.jsx)(n.h3,{id:"options",children:"options"}),"\n",(0,s.jsx)(n.p,{children:"Transformation options"}),"\n",(0,s.jsx)(n.h4,{id:"clean",children:"clean?"}),"\n",(0,s.jsxs)(n.p,{children:["{ ",(0,s.jsx)(n.code,{children:"booleanFields?"}),": ",(0,s.jsx)(n.code,{children:"string"}),"[]; ",(0,s.jsx)(n.code,{children:"customCleaner?"}),": ",(0,s.jsx)(n.code,{children:"Function"}),"; ",(0,s.jsx)(n.code,{children:"dateField?"}),": ",(0,s.jsx)(n.code,{children:"string"}),"; ",(0,s.jsx)(n.code,{children:"numericFields?"}),": ",(0,s.jsx)(n.code,{children:"string"}),"[]; ",(0,s.jsx)(n.code,{children:"removeEmptyStrings?"}),": ",(0,s.jsx)(n.code,{children:"boolean"}),"; ",(0,s.jsx)(n.code,{children:"removeFields?"}),": ",(0,s.jsx)(n.code,{children:"string"}),"[]; ",(0,s.jsx)(n.code,{children:"removeNulls?"}),": ",(0,s.jsx)(n.code,{children:"boolean"}),"; ",(0,s.jsx)(n.code,{children:"renameFields?"}),": ",(0,s.jsx)(n.code,{children:"any"}),"; ",(0,s.jsx)(n.code,{children:"stringFields?"}),": ",(0,s.jsx)(n.code,{children:"string"}),"[]; ",(0,s.jsx)(n.code,{children:"trimStrings?"}),": ",(0,s.jsx)(n.code,{children:"boolean"}),"; }"]}),"\n",(0,s.jsx)(n.p,{children:"Data cleaning options"}),"\n",(0,s.jsx)(n.h4,{id:"cleanbooleanfields",children:"clean.booleanFields?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,s.jsx)(n.p,{children:"Array of fields to convert to booleans"}),"\n",(0,s.jsx)(n.h4,{id:"cleancustomcleaner",children:"clean.customCleaner?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Function"})}),"\n",(0,s.jsx)(n.p,{children:"Custom cleaning function for each record"}),"\n",(0,s.jsx)(n.h4,{id:"cleandatefield",children:"clean.dateField?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"string"})}),"\n",(0,s.jsx)(n.p,{children:"Name of date field to convert to Date object"}),"\n",(0,s.jsx)(n.h4,{id:"cleannumericfields",children:"clean.numericFields?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,s.jsx)(n.p,{children:"Array of fields to convert to numbers"}),"\n",(0,s.jsx)(n.h4,{id:"cleanremoveemptystrings",children:"clean.removeEmptyStrings?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether to remove empty strings"}),"\n",(0,s.jsx)(n.h4,{id:"cleanremovefields",children:"clean.removeFields?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,s.jsx)(n.p,{children:"Array of fields to remove"}),"\n",(0,s.jsx)(n.h4,{id:"cleanremovenulls",children:"clean.removeNulls?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether to remove null/undefined values"}),"\n",(0,s.jsx)(n.h4,{id:"cleanrenamefields",children:"clean.renameFields?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"any"})}),"\n",(0,s.jsx)(n.p,{children:"Object for renaming fields (format: oldName to newName mapping)"}),"\n",(0,s.jsx)(n.h4,{id:"cleanstringfields",children:"clean.stringFields?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,s.jsx)(n.p,{children:"Array of fields to convert to strings"}),"\n",(0,s.jsx)(n.h4,{id:"cleantrimstrings",children:"clean.trimStrings?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether to trim whitespace in strings"}),"\n",(0,s.jsx)(n.h4,{id:"cleanfirst",children:"cleanFirst?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether to clean data before converting to DataFrame"}),"\n",(0,s.jsx)(n.h4,{id:"copy",children:"copy?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"string"})}),"\n",(0,s.jsx)(n.p,{children:"Copy mode: 'none', 'shallow', or 'deep'"}),"\n",(0,s.jsx)(n.h4,{id:"datapath",children:"dataPath?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"string"})}),"\n",(0,s.jsx)(n.p,{children:"Path to data in the response (dot notation)"}),"\n",(0,s.jsx)(n.h4,{id:"mapping",children:"mapping?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"any"})}),"\n",(0,s.jsx)(n.p,{children:"Mapping of API fields to column names"}),"\n",(0,s.jsx)(n.h4,{id:"postclean",children:"postClean?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"any"})}),"\n",(0,s.jsx)(n.p,{children:"DataFrame cleaning options after conversion"}),"\n",(0,s.jsx)(n.h4,{id:"saverawdata",children:"saveRawData?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether to save raw data in the frame"}),"\n",(0,s.jsx)(n.h4,{id:"transform",children:"transform?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Function"})}),"\n",(0,s.jsx)(n.p,{children:"Custom transform function for each row"}),"\n",(0,s.jsx)(n.h4,{id:"usetypedarrays",children:"useTypedArrays?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether to use TypedArrays for numeric columns"}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/api/classes/DataFrame",children:(0,s.jsx)(n.code,{children:"DataFrame"})})}),"\n",(0,s.jsx)(n.p,{children:"DataFrame created from the API data"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}}}]);