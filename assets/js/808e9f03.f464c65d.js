"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[2336],{3774:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var i=a(6672);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},7207:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting-started/tutorials/combining-tables","title":"How to combine data from multiple tables","description":"Learn how to merge, join, and concatenate DataFrames in TinyFrameJS","source":"@site/docs/getting-started/tutorials/combining-tables.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/combining-tables","permalink":"/docs/getting-started/tutorials/combining-tables","draft":false,"unlisted":false,"editUrl":"https://github.com/AlphaQuantJS/tinyframejs/edit/main/docs/getting-started/tutorials/combining-tables.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"combining-tables","title":"How to combine data from multiple tables","sidebar_position":8,"description":"Learn how to merge, join, and concatenate DataFrames in TinyFrameJS"},"sidebar":"docs","previous":{"title":"How to reshape the layout of tables","permalink":"/docs/getting-started/tutorials/reshaping"},"next":{"title":"How to handle time series data","permalink":"/docs/getting-started/tutorials/time-series"}}');var t=a(3420),r=a(3774);const s={id:"combining-tables",title:"How to combine data from multiple tables",sidebar_position:8,description:"Learn how to merge, join, and concatenate DataFrames in TinyFrameJS"},o="How to combine data from multiple tables",d={},c=[{value:"Concatenating DataFrames",id:"concatenating-dataframes",level:2},{value:"Using <code>concat()</code>",id:"using-concat",level:3},{value:"Concatenating with different columns",id:"concatenating-with-different-columns",level:3},{value:"Concatenating along columns",id:"concatenating-along-columns",level:3},{value:"Merging DataFrames",id:"merging-dataframes",level:2},{value:"Using <code>merge()</code>",id:"using-merge",level:3},{value:"Different types of merges",id:"different-types-of-merges",level:3},{value:"Merging on different column names",id:"merging-on-different-column-names",level:3},{value:"Merging on multiple columns",id:"merging-on-multiple-columns",level:3},{value:"Handling duplicate column names",id:"handling-duplicate-column-names",level:3},{value:"Joining DataFrames",id:"joining-dataframes",level:2},{value:"Using <code>join()</code>",id:"using-join",level:3},{value:"Different types of joins",id:"different-types-of-joins",level:3},{value:"Advanced Combining Techniques",id:"advanced-combining-techniques",level:2},{value:"Combining multiple DataFrames",id:"combining-multiple-dataframes",level:3},{value:"Combining with aggregation",id:"combining-with-aggregation",level:3},{value:"Cross join (Cartesian product)",id:"cross-join-cartesian-product",level:3},{value:"Handling Duplicate Rows",id:"handling-duplicate-rows",level:2},{value:"Removing duplicates",id:"removing-duplicates",level:3},{value:"Removing duplicates based on specific columns",id:"removing-duplicates-based-on-specific-columns",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-combine-data-from-multiple-tables",children:"How to combine data from multiple tables"})}),"\n",(0,t.jsx)(n.p,{children:"Combining data from multiple sources is a common operation in data analysis. TinyFrameJS provides several methods for merging, joining, and concatenating DataFrames, allowing you to combine data in various ways depending on your needs."}),"\n",(0,t.jsx)(n.h2,{id:"concatenating-dataframes",children:"Concatenating DataFrames"}),"\n",(0,t.jsxs)(n.h3,{id:"using-concat",children:["Using ",(0,t.jsx)(n.code,{children:"concat()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"concat()"})," method allows you to append rows from one DataFrame to another:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Create two DataFrames\nconst df1 = new DataFrame([\n  {id: 1, name: 'Alice', department: 'Engineering'},\n  {id: 2, name: 'Bob', department: 'Marketing'}\n]);\n\nconst df2 = new DataFrame([\n  {id: 3, name: 'Charlie', department: 'Sales'},\n  {id: 4, name: 'David', department: 'Engineering'}\n]);\n\n// Concatenate the DataFrames\nconst dfConcatenated = DataFrame.concat([df1, df2]);\ndfConcatenated.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name    \u2502 department  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice   \u2502 Engineering \u2502\n\u2502 1     \u2502 2   \u2502 Bob     \u2502 Marketing   \u2502\n\u2502 2     \u2502 3   \u2502 Charlie \u2502 Sales       \u2502\n\u2502 3     \u2502 4   \u2502 David   \u2502 Engineering \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"concatenating-with-different-columns",children:"Concatenating with different columns"}),"\n",(0,t.jsx)(n.p,{children:"When concatenating DataFrames with different columns, you can specify how to handle missing values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with different columns\nconst df3 = new DataFrame([\n  {id: 5, name: 'Eve', salary: 75000},\n  {id: 6, name: 'Frank', salary: 80000}\n]);\n\n// Concatenate with different columns\nconst dfDifferentColumns = DataFrame.concat([df1, df3], {\n  fillValue: 'N/A'  // Fill missing values with 'N/A'\n});\ndfDifferentColumns.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name  \u2502 department  \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice \u2502 Engineering \u2502 N/A    \u2502\n\u2502 1     \u2502 2   \u2502 Bob   \u2502 Marketing   \u2502 N/A    \u2502\n\u2502 2     \u2502 5   \u2502 Eve   \u2502 N/A         \u2502 75000  \u2502\n\u2502 3     \u2502 6   \u2502 Frank \u2502 N/A         \u2502 80000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"concatenating-along-columns",children:"Concatenating along columns"}),"\n",(0,t.jsx)(n.p,{children:"You can also concatenate DataFrames horizontally (along columns):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with the same number of rows\nconst dfA = new DataFrame([\n  {id: 1, name: 'Alice'},\n  {id: 2, name: 'Bob'}\n]);\n\nconst dfB = new DataFrame([\n  {department: 'Engineering', salary: 75000},\n  {department: 'Marketing', salary: 80000}\n]);\n\n// Concatenate horizontally\nconst dfHorizontal = DataFrame.concat([dfA, dfB], {\n  axis: 1  // Concatenate along columns\n});\ndfHorizontal.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name  \u2502 department  \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice \u2502 Engineering \u2502 75000  \u2502\n\u2502 1     \u2502 2   \u2502 Bob   \u2502 Marketing   \u2502 80000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"merging-dataframes",children:"Merging DataFrames"}),"\n",(0,t.jsxs)(n.h3,{id:"using-merge",children:["Using ",(0,t.jsx)(n.code,{children:"merge()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"merge()"})," method allows you to combine DataFrames based on common columns:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create two DataFrames with a common column\nconst employees = new DataFrame([\n  {id: 1, name: 'Alice', department_id: 101},\n  {id: 2, name: 'Bob', department_id: 102},\n  {id: 3, name: 'Charlie', department_id: 101},\n  {id: 4, name: 'David', department_id: 103}\n]);\n\nconst departments = new DataFrame([\n  {department_id: 101, department_name: 'Engineering', location: 'Building A'},\n  {department_id: 102, department_name: 'Marketing', location: 'Building B'},\n  {department_id: 103, department_name: 'Sales', location: 'Building C'}\n]);\n\n// Merge the DataFrames on department_id\nconst merged = employees.merge(departments, {\n  on: 'department_id'  // Merge on this column\n});\nmerged.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name    \u2502 department_id \u2502 department_name    \u2502 location   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice   \u2502 101           \u2502 Engineering        \u2502 Building A \u2502\n\u2502 1     \u2502 3   \u2502 Charlie \u2502 101           \u2502 Engineering        \u2502 Building A \u2502\n\u2502 2     \u2502 2   \u2502 Bob     \u2502 102           \u2502 Marketing          \u2502 Building B \u2502\n\u2502 3     \u2502 4   \u2502 David   \u2502 103           \u2502 Sales              \u2502 Building C \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"different-types-of-merges",children:"Different types of merges"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS supports different types of merges:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Inner merge (default) - only keep rows with matching keys in both DataFrames\nconst innerMerge = employees.merge(departments, {\n  on: 'department_id',\n  how: 'inner'\n});\n\n// Left merge - keep all rows from the left DataFrame\nconst leftMerge = employees.merge(departments, {\n  on: 'department_id',\n  how: 'left'\n});\n\n// Right merge - keep all rows from the right DataFrame\nconst rightMerge = employees.merge(departments, {\n  on: 'department_id',\n  how: 'right'\n});\n\n// Outer merge - keep all rows from both DataFrames\nconst outerMerge = employees.merge(departments, {\n  on: 'department_id',\n  how: 'outer'\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"merging-on-different-column-names",children:"Merging on different column names"}),"\n",(0,t.jsx)(n.p,{children:"You can merge DataFrames with different column names:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with different column names\nconst employeesAlt = new DataFrame([\n  {employee_id: 1, name: 'Alice', dept_id: 101},\n  {employee_id: 2, name: 'Bob', dept_id: 102},\n  {employee_id: 3, name: 'Charlie', dept_id: 101},\n  {employee_id: 4, name: 'David', dept_id: 103}\n]);\n\n// Merge on different column names\nconst mergedDifferentColumns = employeesAlt.merge(departments, {\n  left_on: 'dept_id',        // Column name in the left DataFrame\n  right_on: 'department_id'  // Column name in the right DataFrame\n});\nmergedDifferentColumns.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 employee_id\u2502 name    \u2502 dept_id \u2502 department_id \u2502 department_name    \u2502 location   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1          \u2502 Alice   \u2502 101     \u2502 101           \u2502 Engineering        \u2502 Building A \u2502\n\u2502 1     \u2502 3          \u2502 Charlie \u2502 101     \u2502 101           \u2502 Engineering        \u2502 Building A \u2502\n\u2502 2     \u2502 2          \u2502 Bob     \u2502 102     \u2502 102           \u2502 Marketing          \u2502 Building B \u2502\n\u2502 3     \u2502 4          \u2502 David   \u2502 103     \u2502 103           \u2502 Sales              \u2502 Building C \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"merging-on-multiple-columns",children:"Merging on multiple columns"}),"\n",(0,t.jsx)(n.p,{children:"You can merge DataFrames based on multiple columns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with multiple common columns\nconst orders = new DataFrame([\n  {order_id: 1, customer_id: 101, product_id: 201, quantity: 2},\n  {order_id: 2, customer_id: 102, product_id: 202, quantity: 1},\n  {order_id: 3, customer_id: 101, product_id: 203, quantity: 3},\n  {order_id: 4, customer_id: 103, product_id: 201, quantity: 1}\n]);\n\nconst inventory = new DataFrame([\n  {product_id: 201, customer_id: 101, price: 10.99, in_stock: 50},\n  {product_id: 201, customer_id: 103, price: 9.99, in_stock: 50},\n  {product_id: 202, customer_id: 102, price: 15.99, in_stock: 30},\n  {product_id: 203, customer_id: 101, price: 5.99, in_stock: 100}\n]);\n\n// Merge on multiple columns\nconst multiColumnMerge = orders.merge(inventory, {\n  on: ['product_id', 'customer_id']  // Merge on these columns\n});\nmultiColumnMerge.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 order_id \u2502 customer_id \u2502 product_id \u2502 quantity \u2502 price \u2502 in_stock \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1        \u2502 101         \u2502 201        \u2502 2        \u2502 10.99 \u2502 50       \u2502\n\u2502 1     \u2502 2        \u2502 102         \u2502 202        \u2502 1        \u2502 15.99 \u2502 30       \u2502\n\u2502 2     \u2502 3        \u2502 101         \u2502 203        \u2502 3        \u2502 5.99  \u2502 100      \u2502\n\u2502 3     \u2502 4        \u2502 103         \u2502 201        \u2502 1        \u2502 9.99  \u2502 50       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"handling-duplicate-column-names",children:"Handling duplicate column names"}),"\n",(0,t.jsx)(n.p,{children:"When merging DataFrames with duplicate column names, you can specify suffixes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with duplicate column names\nconst customers = new DataFrame([\n  {id: 101, name: 'Alice', age: 30},\n  {id: 102, name: 'Bob', age: 25},\n  {id: 103, name: 'Charlie', age: 35}\n]);\n\nconst purchases = new DataFrame([\n  {id: 1, customer_id: 101, name: 'Purchase 1', amount: 100},\n  {id: 2, customer_id: 102, name: 'Purchase 2', amount: 200},\n  {id: 3, customer_id: 101, name: 'Purchase 3', amount: 150}\n]);\n\n// Merge with suffixes for duplicate column names\nconst mergedWithSuffixes = customers.merge(purchases, {\n  left_on: 'id',\n  right_on: 'customer_id',\n  suffixes: ['_customer', '_purchase']  // Suffixes for duplicate column names\n});\nmergedWithSuffixes.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id_cu\u2502 name_customer  \u2502 age          \u2502 id_p\u2502 customer_id \u2502 name_purchase  \u2502 amount \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 101  \u2502 Alice          \u2502 30           \u2502 1   \u2502 101         \u2502 Purchase 1     \u2502 100    \u2502\n\u2502 1     \u2502 101  \u2502 Alice          \u2502 30           \u2502 3   \u2502 101         \u2502 Purchase 3     \u2502 150    \u2502\n\u2502 2     \u2502 102  \u2502 Bob            \u2502 25           \u2502 2   \u2502 102         \u2502 Purchase 2     \u2502 200    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"joining-dataframes",children:"Joining DataFrames"}),"\n",(0,t.jsxs)(n.h3,{id:"using-join",children:["Using ",(0,t.jsx)(n.code,{children:"join()"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"join()"})," method is similar to ",(0,t.jsx)(n.code,{children:"merge()"})," but uses the index of the right DataFrame:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with indices\nconst dfLeft = new DataFrame([\n  {name: 'Alice', age: 30},\n  {name: 'Bob', age: 25},\n  {name: 'Charlie', age: 35}\n], {\n  index: [101, 102, 103]  // Set custom indices\n});\n\nconst dfRight = new DataFrame([\n  {department: 'Engineering', salary: 75000},\n  {department: 'Marketing', salary: 80000},\n  {department: 'Sales', salary: 70000}\n], {\n  index: [101, 102, 104]  // Set custom indices\n});\n\n// Join the DataFrames on their indices\nconst joined = dfLeft.join(dfRight);\njoined.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 name    \u2502 age \u2502 department  \u2502 salary \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 101   \u2502 Alice   \u2502 30  \u2502 Engineering \u2502 75000  \u2502\n\u2502 102   \u2502 Bob     \u2502 25  \u2502 Marketing   \u2502 80000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"different-types-of-joins",children:"Different types of joins"}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.code,{children:"merge()"}),", ",(0,t.jsx)(n.code,{children:"join()"})," supports different types of joins:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Inner join (default)\nconst innerJoin = dfLeft.join(dfRight, {\n  how: 'inner'\n});\n\n// Left join\nconst leftJoin = dfLeft.join(dfRight, {\n  how: 'left'\n});\n\n// Right join\nconst rightJoin = dfLeft.join(dfRight, {\n  how: 'right'\n});\n\n// Outer join\nconst outerJoin = dfLeft.join(dfRight, {\n  how: 'outer'\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-combining-techniques",children:"Advanced Combining Techniques"}),"\n",(0,t.jsx)(n.h3,{id:"combining-multiple-dataframes",children:"Combining multiple DataFrames"}),"\n",(0,t.jsx)(n.p,{children:"You can combine multiple DataFrames in a single operation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create multiple DataFrames\nconst df1 = new DataFrame([{id: 1, name: 'Alice'}]);\nconst df2 = new DataFrame([{id: 2, name: 'Bob'}]);\nconst df3 = new DataFrame([{id: 3, name: 'Charlie'}]);\n\n// Concatenate multiple DataFrames\nconst combined = DataFrame.concat([df1, df2, df3]);\ncombined.print();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"combining-with-aggregation",children:"Combining with aggregation"}),"\n",(0,t.jsx)(n.p,{children:"You can combine DataFrames and then aggregate the results:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames\nconst sales2022 = new DataFrame([\n  {region: 'North', product: 'A', sales: 100},\n  {region: 'North', product: 'B', sales: 150},\n  {region: 'South', product: 'A', sales: 80},\n  {region: 'South', product: 'B', sales: 120}\n]);\n\nconst sales2023 = new DataFrame([\n  {region: 'North', product: 'A', sales: 110},\n  {region: 'North', product: 'B', sales: 160},\n  {region: 'South', product: 'A', sales: 90},\n  {region: 'South', product: 'B', sales: 130}\n]);\n\n// Add a year column to each DataFrame\nconst sales2022WithYear = sales2022.assign({year: 2022});\nconst sales2023WithYear = sales2023.assign({year: 2023});\n\n// Concatenate the DataFrames\nconst allSales = DataFrame.concat([sales2022WithYear, sales2023WithYear]);\n\n// Aggregate by region and product\nconst aggregated = allSales\n  .groupby(['region', 'product'])\n  .agg({\n    sales: ['sum', 'mean']\n  });\n\naggregated.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 region \u2502 product \u2502 sales_sum  \u2502 sales_mean \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 North  \u2502 A       \u2502 210        \u2502 105        \u2502\n\u2502 North  \u2502 B       \u2502 310        \u2502 155        \u2502\n\u2502 South  \u2502 A       \u2502 170        \u2502 85         \u2502\n\u2502 South  \u2502 B       \u2502 250        \u2502 125        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cross-join-cartesian-product",children:"Cross join (Cartesian product)"}),"\n",(0,t.jsx)(n.p,{children:"You can create a cross join (Cartesian product) of two DataFrames:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames\nconst colors = new DataFrame([\n  {color: 'red'},\n  {color: 'blue'},\n  {color: 'green'}\n]);\n\nconst sizes = new DataFrame([\n  {size: 'small'},\n  {size: 'medium'},\n  {size: 'large'}\n]);\n\n// Create a cross join\nconst crossJoin = colors.merge(sizes, {\n  how: 'cross'  // Cross join\n});\ncrossJoin.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 color \u2502 size  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 red   \u2502 small \u2502\n\u2502 1     \u2502 red   \u2502 medium\u2502\n\u2502 2     \u2502 red   \u2502 large \u2502\n\u2502 3     \u2502 blue  \u2502 small \u2502\n\u2502 4     \u2502 blue  \u2502 medium\u2502\n\u2502 5     \u2502 blue  \u2502 large \u2502\n\u2502 6     \u2502 green \u2502 small \u2502\n\u2502 7     \u2502 green \u2502 medium\u2502\n\u2502 8     \u2502 green \u2502 large \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"handling-duplicate-rows",children:"Handling Duplicate Rows"}),"\n",(0,t.jsx)(n.p,{children:"When combining DataFrames, you might end up with duplicate rows. TinyFrameJS provides methods to handle this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Create DataFrames with potential duplicates\nconst df1 = new DataFrame([\n  {id: 1, name: 'Alice'},\n  {id: 2, name: 'Bob'}\n]);\n\nconst df2 = new DataFrame([\n  {id: 2, name: 'Bob'},\n  {id: 3, name: 'Charlie'}\n]);\n\n// Concatenate the DataFrames\nconst concatenated = DataFrame.concat([df1, df2]);\nconcatenated.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice   \u2502\n\u2502 1     \u2502 2   \u2502 Bob     \u2502\n\u2502 2     \u2502 2   \u2502 Bob     \u2502\n\u2502 3     \u2502 3   \u2502 Charlie \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removing-duplicates",children:"Removing duplicates"}),"\n",(0,t.jsxs)(n.p,{children:["You can remove duplicate rows using the ",(0,t.jsx)(n.code,{children:"dropDuplicates()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Remove duplicate rows\nconst uniqueRows = concatenated.dropDuplicates();\nuniqueRows.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice   \u2502\n\u2502 1     \u2502 2   \u2502 Bob     \u2502\n\u2502 3     \u2502 3   \u2502 Charlie \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removing-duplicates-based-on-specific-columns",children:"Removing duplicates based on specific columns"}),"\n",(0,t.jsx)(n.p,{children:"You can remove duplicates based on specific columns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Remove duplicates based on the 'id' column\nconst uniqueIds = concatenated.dropDuplicates(['id']);\nuniqueIds.print();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 id  \u2502 name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1   \u2502 Alice   \u2502\n\u2502 1     \u2502 2   \u2502 Bob     \u2502\n\u2502 3     \u2502 3   \u2502 Charlie \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Now that you know how to combine data from multiple tables with TinyFrameJS, you can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Learn how to ",(0,t.jsx)(n.a,{href:"./time-series",children:"handle time series data"})]}),"\n",(0,t.jsxs)(n.li,{children:["Explore how to ",(0,t.jsx)(n.a,{href:"./text-processing",children:"process textual data"})]}),"\n",(0,t.jsxs)(n.li,{children:["Discover how to ",(0,t.jsx)(n.a,{href:"./missing-data",children:"work with missing data"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);