"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[6535],{3774:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var a=i(6672);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},9748:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"getting-started/package-overview","title":"Package Overview","description":"Overview of TinyFrameJS package structure and components","source":"@site/docs/getting-started/package-overview.md","sourceDirName":"getting-started","slug":"/getting-started/package-overview","permalink":"/tinyframejs/docs/getting-started/package-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/tinyframejs/tinyframejs/edit/main/docs/getting-started/package-overview.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"package-overview","title":"Package Overview","sidebar_position":2,"description":"Overview of TinyFrameJS package structure and components"},"sidebar":"docs","previous":{"title":"Installation","permalink":"/tinyframejs/docs/getting-started/installation"},"next":{"title":"DataFrame Basics","permalink":"/tinyframejs/docs/getting-started/tutorials/dataframe-basics"}}');var t=i(3420),r=i(3774);const s={id:"package-overview",title:"Package Overview",sidebar_position:2,description:"Overview of TinyFrameJS package structure and components"},o="Package Overview",d={},l=[{value:"Core Principles and Advantages",id:"core-principles-and-advantages",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"TinyFrame",id:"tinyframe",level:3},{value:"DataFrame",id:"dataframe",level:3},{value:"Project Structure",id:"project-structure",level:2},{value:"Automatic Extension Mechanism",id:"automatic-extension-mechanism",level:2},{value:"Core Functionality",id:"core-functionality",level:2},{value:"Data Input/Output",id:"data-inputoutput",level:3},{value:"Data Transformations",id:"data-transformations",level:3},{value:"Aggregations",id:"aggregations",level:3},{value:"Grouping and Pivot Tables",id:"grouping-and-pivot-tables",level:3},{value:"Window Functions",id:"window-functions",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"StreamingFrame",id:"streamingframe",level:3},{value:"LazyPipeline",id:"lazypipeline",level:3},{value:"Performance",id:"performance",level:2},{value:"Community and Support",id:"community-and-support",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"package-overview",children:"Package Overview"})}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS is a high-performance JavaScript framework for processing tabular and financial data. It is optimized for the JavaScript environment and provides efficient tools for data analysis. This page describes the package structure and its main components."}),"\n",(0,t.jsx)(n.h2,{id:"core-principles-and-advantages",children:"Core Principles and Advantages"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS is designed with the following principles in mind:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Using TypedArray and optimized algorithms provides a 10-100\xd7 speed increase compared to traditional JS data structures."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pure JavaScript"}),": Fully native implementation without binary dependencies."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Support for tree-shaking to optimize bundle size."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ease of Use"}),": Intuitive API with support for method chaining."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility"}),": Ability to work with both small and large datasets."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS is especially useful for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Financial data analysis"}),"\n",(0,t.jsx)(n.li,{children:"Time series processing"}),"\n",(0,t.jsx)(n.li,{children:"Statistical calculations"}),"\n",(0,t.jsx)(n.li,{children:"Data preparation for visualization"}),"\n",(0,t.jsx)(n.li,{children:"Working with tabular data in web applications"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS provides two main data structures:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Dimensionality"}),(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1D"}),(0,t.jsx)(n.td,{children:"Series"}),(0,t.jsx)(n.td,{children:"One-dimensional typed array with labels"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2D"}),(0,t.jsx)(n.td,{children:"DataFrame"}),(0,t.jsx)(n.td,{children:"Two-dimensional tabular structure with labels and columns of different types"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"tinyframe",children:"TinyFrame"}),"\n",(0,t.jsx)(n.p,{children:"At the core of TinyFrameJS is the low-level data structure TinyFrame:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Internal TinyFrame structure\n{\n  columns: {\n    date: ['2023-01-01', '2023-01-02', ...],\n    price: Float64Array([100, 105, ...]),\n    volume: Float64Array([1000, 1500, ...])\n  },\n  index: Int32Array([0, 1, 2, ...])\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"TinyFrame organizes data in a columnar format, which provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Efficient memory usage"}),"\n",(0,t.jsx)(n.li,{children:"Fast operations on columns"}),"\n",(0,t.jsx)(n.li,{children:"Optimized aggregations and transformations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dataframe",children:"DataFrame"}),"\n",(0,t.jsx)(n.p,{children:"DataFrame is a high-level class that wraps TinyFrame and provides a convenient API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Creating a DataFrame\nconst df = DataFrame.create({\n  date: ['2023-01-01', '2023-01-02'],\n  price: [100, 105],\n  volume: [1000, 1500]\n});\n\n// Accessing data\nconsole.log(df.columns);    // ['date', 'price', 'volume']\nconsole.log(df.rowCount);   // 2\n"})}),"\n",(0,t.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS is organized into the following logical structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"tinyframejs/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 core/                  # Basic data structures and utilities\n\u2502   \u2502   \u251c\u2500\u2500 DataFrame.js       # DataFrame class\n\u2502   \u2502   \u251c\u2500\u2500 StreamingFrame.js  # Processing large datasets\n\u2502   \u2502   \u251c\u2500\u2500 LazyPipeline.js    # Lazy calculations\n\u2502   \u2502   \u251c\u2500\u2500 createFrame.js     # Creating TinyFrame structure\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 io/                    # Input-output module\n\u2502   \u2502   \u251c\u2500\u2500 readers/           # Reading from different sources\n\u2502   \u2502   \u251c\u2500\u2500 writers/           # Writing to different formats\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 methods/               # Methods for working with data\n\u2502   \u2502   \u251c\u2500\u2500 aggregation/       # Aggregation functions\n\u2502   \u2502   \u251c\u2500\u2500 filtering/         # Filtering functions\n\u2502   \u2502   \u251c\u2500\u2500 sorting/           # Sorting methods\n\u2502   \u2502   \u251c\u2500\u2500 transform/         # Transformation methods\n\u2502   \u2502   \u251c\u2500\u2500 reshape/           # Reshaping methods\n\u2502   \u2502   \u251c\u2500\u2500 window/            # Window functions\n\u2502   \u2502   \u251c\u2500\u2500 display/           # Display methods\n\u2502   \u2502   \u251c\u2500\u2500 autoExtend.js      # Automatic extension of DataFrame\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 utils/                 # Utilities\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 test/                      # Tests\n\u251c\u2500\u2500 examples/                  # Usage examples\n\u2514\u2500\u2500 ...\n"})}),"\n",(0,t.jsx)(n.h2,{id:"automatic-extension-mechanism",children:"Automatic Extension Mechanism"}),"\n",(0,t.jsx)(n.p,{children:"One of the key features of TinyFrameJS is the automatic method extension mechanism:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All methods are defined as pure functions with dependency injection"}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"inject.js"})," module centralizes dependencies (validators, loggers, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"autoExtend.js"})," module automatically attaches methods to ",(0,t.jsx)(n.code,{children:"DataFrame.prototype"})]}),"\n",(0,t.jsx)(n.li,{children:"This happens once during library initialization"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Method definition\nexport const mean = \n  ({ validateColumn }) => \n  (frame, column) => {\n    validateColumn(frame, column);\n    // Method implementation\n  };\n\n// Automatic extension\nDataFrame.prototype.mean = function(column) {\n  return mean({ validateColumn })(this._frame, column);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"This approach provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Modularity and tree-shaking capability"}),"\n",(0,t.jsx)(n.li,{children:"Clean separation of logic and API"}),"\n",(0,t.jsx)(n.li,{children:"No boilerplate for method registration"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,t.jsx)(n.h3,{id:"data-inputoutput",children:"Data Input/Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Reading from CSV\nconst dfFromCSV = await DataFrame.readCSV('data.csv');\n\n// Reading from JSON\nconst dfFromJSON = await DataFrame.readJSON('data.json');\n\n// Writing to CSV\nawait df.writeCSV('output.csv');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"data-transformations",children:"Data Transformations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Transformation chain\nconst result = df\n  .dropNaN('price')    // Removes rows with NaN\n  .sort('price')       // Sorts by column\n  .head(10)            // Takes the first 10 rows\n  .derive({            // Creates new columns\n    pricePerUnit: row => row.price / row.volume,\n    logPrice: row => Math.log(row.price)\n  });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"aggregations",children:"Aggregations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Basic aggregations\nconst mean = df.mean('price');\nconst sum = df.sum('volume');\nconst min = df.min('price');\nconst max = df.max('price');\n\n// Descriptive statistics\nconst stats = df.describe();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"grouping-and-pivot-tables",children:"Grouping and Pivot Tables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Grouping and aggregation\nconst grouped = df.groupBy('category').aggregate({\n  price: 'mean',\n  volume: 'sum'\n});\n\n// Pivot table\nconst pivoted = df.pivot('date', 'category', 'price');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"window-functions",children:"Window Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Rolling mean\nconst rolling = df.rollingMean('price', 5);\n\n// Exponentially weighted mean\nconst ewm = df.ewm('price', 0.5);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"streamingframe",children:"StreamingFrame"}),"\n",(0,t.jsx)(n.p,{children:"StreamingFrame is designed for processing datasets that don't fit in memory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { StreamingFrame } from 'tinyframejs';\n\nconst streamingFrame = new StreamingFrame({\n  source: 'large-file.csv',\n  chunkSize: 10000,  // Rows at a time\n});\n\n// Processing data in chunks\nawait streamingFrame.process(chunk => {\n  // Processing a chunk of data\n  return processedChunk;\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"lazypipeline",children:"LazyPipeline"}),"\n",(0,t.jsx)(n.p,{children:"LazyPipeline optimizes the execution of complex operation chains:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Creating a lazy operation chain\nconst pipeline = df.lazy()\n  .dropNaN('price')\n  .sort('price')\n  .head(100)\n  .mean('price');\n\n// Executing the chain only when the result is requested\nconst result = pipeline.compute();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS provides a significant performance advantage:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"tinyframejs"}),(0,t.jsx)(n.th,{children:"Other JS libraries"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"rollingMean"}),(0,t.jsx)(n.td,{children:"~50ms"}),(0,t.jsx)(n.td,{children:"~400ms"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"normalize"}),(0,t.jsx)(n.td,{children:"~35ms"}),(0,t.jsx)(n.td,{children:"~300ms"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"corrMatrix"}),(0,t.jsx)(n.td,{children:"~60ms"}),(0,t.jsx)(n.td,{children:"~500ms"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"dropNaN"}),(0,t.jsx)(n.td,{children:"~20ms"}),(0,t.jsx)(n.td,{children:"~100ms"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"All results measured on 100,000 rows \xd7 10 columns."}),"\n",(0,t.jsx)(n.h2,{id:"community-and-support",children:"Community and Support"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS is actively supported by the developer community. If you have questions or suggestions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Visit the GitHub repository"}),"\n",(0,t.jsx)(n.li,{children:"Check out the usage examples"}),"\n",(0,t.jsx)(n.li,{children:"Join the discussions"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"TinyFrameJS provides a powerful and efficient tool for data analysis in JavaScript. Thanks to its optimized data structure, modular design, and automatic method extension, TinyFrameJS delivers high performance while maintaining the flexibility and ease of use of JavaScript."}),"\n",(0,t.jsxs)(n.p,{children:["For more detailed information on working with DataFrame, see the ",(0,t.jsx)(n.a,{href:"./tutorials/dataframe-basics",children:"DataFrame Basics"})," section."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);