"use strict";(self.webpackChunktinyframejs_docs=self.webpackChunktinyframejs_docs||[]).push([[5758],{2362:(e,n,a)=>{a.d(n,{A:()=>k});var t=a(6540),i=a(4848);function r(e){const{mdxAdmonitionTitle:n,rest:a}=function(e){const n=t.Children.toArray(e),a=n.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),r=n.filter((e=>e!==a)),s=a?.props.children;return{mdxAdmonitionTitle:s,rest:r.length>0?(0,i.jsx)(i.Fragment,{children:r}):null}}(e.children),r=e.title??n;return{...e,...r&&{title:r},children:a}}var s=a(4164),o=a(539),l=a(204);const d="admonition_xJq3",c="admonitionHeading_Gvgb",h="admonitionIcon_Rf37",m="admonitionContent_BuS1";function u(e){let{type:n,className:a,children:t}=e;return(0,i.jsx)("div",{className:(0,s.A)(l.G.common.admonition,l.G.common.admonitionType(n),d,a),children:t})}function p(e){let{icon:n,title:a}=e;return(0,i.jsxs)("div",{className:c,children:[(0,i.jsx)("span",{className:h,children:n}),a]})}function f(e){let{children:n}=e;return n?(0,i.jsx)("div",{className:m,children:n}):null}function x(e){const{type:n,icon:a,title:t,children:r,className:s}=e;return(0,i.jsxs)(u,{type:n,className:s,children:[t||a?(0,i.jsx)(p,{title:t,icon:a}):null,(0,i.jsx)(f,{children:r})]})}function g(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const j={icon:(0,i.jsx)(g,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function v(e){return(0,i.jsx)(x,{...j,...e,className:(0,s.A)("alert alert--secondary",e.className),children:e.children})}function y(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const b={icon:(0,i.jsx)(y,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function w(e){return(0,i.jsx)(x,{...b,...e,className:(0,s.A)("alert alert--success",e.className),children:e.children})}function F(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const N={icon:(0,i.jsx)(F,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function D(e){return(0,i.jsx)(x,{...N,...e,className:(0,s.A)("alert alert--info",e.className),children:e.children})}function T(e){return(0,i.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const A={icon:(0,i.jsx)(T,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function S(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const C={icon:(0,i.jsx)(S,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const z={icon:(0,i.jsx)(T,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const M={...{note:v,tip:w,info:D,warning:function(e){return(0,i.jsx)(x,{...A,...e,className:(0,s.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,i.jsx)(x,{...C,...e,className:(0,s.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,i.jsx)(v,{title:"secondary",...e}),important:e=>(0,i.jsx)(D,{title:"important",...e}),success:e=>(0,i.jsx)(w,{title:"success",...e}),caution:function(e){return(0,i.jsx)(x,{...z,...e,className:(0,s.A)("alert alert--warning",e.className),children:e.children})}}};function k(e){const n=r(e),a=(t=n.type,M[t]||(console.warn(`No admonition component found for admonition type "${t}". Using Info as fallback.`),M.info));var t;return(0,i.jsx)(a,{...n})}},3188:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"getting-started/tutorials/dataframe-basics","title":"DataFrame Basics","description":"Learn the basics of working with DataFrames in TinyFrameJS, including the architecture, data flow, and common operations.","source":"@site/docs/getting-started/tutorials/dataframe-basics.md","sourceDirName":"getting-started/tutorials","slug":"/getting-started/tutorials/dataframe-basics","permalink":"/tinyframejs/docs/getting-started/tutorials/dataframe-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/tinyframejs/tinyframejs/edit/main/docs/getting-started/tutorials/dataframe-basics.md","tags":[],"version":"current","frontMatter":{"id":"dataframe-basics","title":"DataFrame Basics","sidebar_label":"DataFrame Basics","slug":"/getting-started/tutorials/dataframe-basics","description":"Learn the basics of working with DataFrames in TinyFrameJS, including the architecture, data flow, and common operations."},"sidebar":"docs","previous":{"title":"Package Overview","permalink":"/tinyframejs/docs/getting-started/package-overview"},"next":{"title":"How do I read and write tabular data?","permalink":"/tinyframejs/docs/getting-started/tutorials/io"}}');var i=a(4848),r=a(8453);a(2362);const s={id:"dataframe-basics",title:"DataFrame Basics",sidebar_label:"DataFrame Basics",slug:"/getting-started/tutorials/dataframe-basics",description:"Learn the basics of working with DataFrames in TinyFrameJS, including the architecture, data flow, and common operations."},o="DataFrame Basics",l={},d=[{value:"What is a DataFrame?",id:"what-is-a-dataframe",level:2},{value:"Architecture of Data in TinyFrameJS",id:"architecture-of-data-in-tinyframejs",level:2},{value:"TinyFrame: The Foundation of Performance",id:"tinyframe-the-foundation-of-performance",level:3},{value:"DataFrame: Convenient API",id:"dataframe-convenient-api",level:3},{value:"Under the Hood",id:"under-the-hood",level:3},{value:"Creating a DataFrame",id:"creating-a-dataframe",level:2},{value:"Types of DataFrame Methods",id:"types-of-dataframe-methods",level:2},{value:"1. Transformation Methods",id:"1-transformation-methods",level:3},{value:"2. Aggregation Methods",id:"2-aggregation-methods",level:3},{value:"Automatic Extension Mechanism",id:"automatic-extension-mechanism",level:2},{value:"Data Flow",id:"data-flow",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Operations",id:"basic-operations",level:3},{value:"Table Display and Formatting",id:"table-display-and-formatting",level:3},{value:"Transformations and Aggregations",id:"transformations-and-aggregations",level:3},{value:"Group Operations",id:"group-operations",level:3},{value:"Reshaping Operations",id:"reshaping-operations",level:3},{value:"Working with Tables",id:"working-with-tables",level:3},{value:"Joining Tables",id:"joining-tables",level:4},{value:"Handling Missing Values",id:"handling-missing-values",level:4},{value:"Time Series Operations",id:"time-series-operations",level:4},{value:"Data Export and Visualization",id:"data-export-and-visualization",level:4},{value:"Future Extensions",id:"future-extensions",level:2},{value:"StreamingFrame",id:"streamingframe",level:3},{value:"LazyPipeline",id:"lazypipeline",level:3},{value:"Advantages of TinyFrameJS",id:"advantages-of-tinyframejs",level:2},{value:"Comparison with Regular JS Code",id:"comparison-with-regular-js-code",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dataframe-basics",children:"DataFrame Basics"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-dataframe",children:"What is a DataFrame?"}),"\n",(0,i.jsx)(n.p,{children:"In TinyFrameJS, DataFrame is a convenient wrapper around the core data structure TinyFrame. DataFrame provides a rich API for working with tabular data, while TinyFrame ensures efficient storage and processing of data at a low level."}),"\n",(0,i.jsx)(n.p,{children:"TinyFrame uses TypedArray (such as Float64Array and Int32Array) for storing data in a dense, column-oriented format, which provides a significant performance advantage compared to regular JavaScript arrays and objects."}),"\n",(0,i.jsx)(n.h2,{id:"architecture-of-data-in-tinyframejs",children:"Architecture of Data in TinyFrameJS"}),"\n",(0,i.jsx)(n.h3,{id:"tinyframe-the-foundation-of-performance",children:"TinyFrame: The Foundation of Performance"}),"\n",(0,i.jsx)(n.p,{children:"TinyFrame is an internal data structure that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stores data in columnar format using TypedArray"}),"\n",(0,i.jsx)(n.li,{children:"Provides dense memory layout and type uniformity"}),"\n",(0,i.jsx)(n.li,{children:"Enables 10-100\xd7 performance gains compared to traditional JS objects and arrays"}),"\n",(0,i.jsx)(n.li,{children:"Is optimized for fast operations on large datasets"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Internal TinyFrame structure (not intended for direct use)\n{\n  columns: {\n    date: ['2023-01-01', '2023-01-02', ...],\n    price: Float64Array([100, 105, ...]),\n    volume: Float64Array([1000, 1500, ...])\n  },\n  index: Int32Array([0, 1, 2, ...])\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dataframe-convenient-api",children:"DataFrame: Convenient API"}),"\n",(0,i.jsx)(n.p,{children:"DataFrame is a class that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Wraps TinyFrame, providing a convenient API"}),"\n",(0,i.jsx)(n.li,{children:"Is automatically extended with methods during initialization"}),"\n",(0,i.jsx)(n.li,{children:"Supports method chaining"}),"\n",(0,i.jsx)(n.li,{children:"Provides an intuitive interface for working with data"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"under-the-hood",children:"Under the Hood"}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center"},children:[(0,i.jsx)("img",{src:"/img/gs-data-table.png",alt:"Data table structure",width:"320"}),(0,i.jsx)("p",{children:(0,i.jsxs)("em",{children:["Each column is its own TypedArray. Rows are simply indices ",(0,i.jsx)("code",{children:"0\u2026N-1"}),"."]})})]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-dataframe",children:"Creating a DataFrame"}),"\n",(0,i.jsxs)(n.p,{children:["For creating a DataFrame, it's recommended to use the static method ",(0,i.jsx)(n.code,{children:"DataFrame.create()"}),", which internally calls the ",(0,i.jsx)(n.code,{children:"createFrame"})," function to create an optimized TinyFrame structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { DataFrame } from 'tinyframejs';\n\n// Recommended way to create a DataFrame\nconst df = DataFrame.create({\n  date: ['2023-01-01', '2023-01-02'],\n  price: [100, 105],\n  volume: [1000, 1500]\n});\n\n// Alternative way (uses the same mechanism internally)\nconst df2 = new DataFrame({\n  date: ['2023-01-01', '2023-01-02'],\n  price: [100, 105],\n  volume: [1000, 1500]\n});\n\n// Display the DataFrame\ndf.print();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2502 date       \u2502 price \u2502 volume \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   0   \u2502 2023-01-01 \u2502 100   \u2502 1000   \u2502\n\u2502   1   \u2502 2023-01-02 \u2502 105   \u2502 1500   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also create a DataFrame from an array of objects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const df3 = DataFrame.create([\n  {date: '2023-01-01', price: 100, volume: 1000},\n  {date: '2023-01-02', price: 105, volume: 1500}\n]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"types-of-dataframe-methods",children:"Types of DataFrame Methods"}),"\n",(0,i.jsx)(n.p,{children:"DataFrame methods fall into two categories:"}),"\n",(0,i.jsx)(n.h3,{id:"1-transformation-methods",children:"1. Transformation Methods"}),"\n",(0,i.jsx)(n.p,{children:"These methods create a new DataFrame and can be chained together:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const filteredSorted = df\n  .dropNaN('price')    // Removes rows with NaN in the price column\n  .sort('price')       // Sorts by the price column\n  .head(10);           // Takes the first 10 rows\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-aggregation-methods",children:"2. Aggregation Methods"}),"\n",(0,i.jsx)(n.p,{children:"These methods return a scalar value or array and typically end a method chain:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const averagePrice = df\n  .dropNaN('price')\n  .mean('price');      // Returns a number (average value)\n\nconst summary = df.describe(); // Returns an object with descriptive statistics\n"})}),"\n",(0,i.jsx)(n.h2,{id:"automatic-extension-mechanism",children:"Automatic Extension Mechanism"}),"\n",(0,i.jsx)(n.p,{children:"One of the key innovations of TinyFrameJS is the automatic method extension:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All methods are defined as pure, curried functions with dependency injection"}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"inject.js"})," module centralizes dependencies such as validators"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"autoExtend.js"})," module automatically attaches all methods to ",(0,i.jsx)(n.code,{children:"DataFrame.prototype"})]}),"\n",(0,i.jsx)(n.li,{children:"This happens once during initialization at runtime"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach provides several benefits:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Zero boilerplate: No need for manual method registration"}),"\n",(0,i.jsx)(n.li,{children:"Clean separation: Clear separation between core logic and API"}),"\n",(0,i.jsx)(n.li,{children:"Flexibility: Methods can be easily added, removed, or modified"}),"\n",(0,i.jsx)(n.li,{children:"Optimization: Support for tree-shaking to reduce bundle size"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,i.jsx)(n.p,{children:"TinyFrameJS follows a clear data flow from raw inputs to flexible API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Raw data (CSV, JSON, API) \u2192 reader.js \u2192 createFrame.js \u2192 \nTinyFrame \u2192 DataFrame \u2192 Automatically extended methods \u2192 \nUser API: df.sort().dropNaN().head().count()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Getting information about the DataFrame\nconsole.log(df.columns);    // List of columns\nconsole.log(df.rowCount);   // Number of rows\n\n// Converting to an array\nconst array = df.toArray(); // Converts to an array of objects\n\n// Accessing data\nconst firstRow = df.row(0);\nconst priceColumn = df.column('price');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"table-display-and-formatting",children:"Table Display and Formatting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Basic table display\ndf.print();  // Prints the DataFrame in a formatted table\n\n// Output:\n// \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n// \u2502 index \u2502 date       \u2502 price \u2502 volume \u2502\n// \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n// \u2502   0   \u2502 2023-01-01 \u2502 100   \u2502 1000   \u2502\n// \u2502   1   \u2502 2023-01-02 \u2502 105   \u2502 1500   \u2502\n// \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n// Customized table display with options\ndf.print({\n  maxRows: 10,        // Maximum number of rows to display\n  maxCols: 5,         // Maximum number of columns to display\n  precision: 2,       // Number of decimal places for floating-point numbers\n  truncate: 20,       // Maximum length of string values before truncation\n  header: true,       // Whether to display the header\n  index: true,        // Whether to display the index\n  border: 'rounded'   // Border style: 'rounded', 'sharp', or 'none'\n});\n\n// HTML table for web display\nconst htmlTable = df.toHTML({\n  classes: ['data-table', 'striped'],\n  id: 'my-table',\n  caption: 'Stock Prices'\n});\nconsole.log(htmlTable);\n\n// Markdown table for documentation\nconst mdTable = df.toMarkdown();\nconsole.log(mdTable);\n\n// ASCII table for console output (without Unicode characters)\ndf.print({ border: 'ascii' });\n\n// Output:\n// +-------+------------+-------+--------+\n// | index | date       | price | volume |\n// +-------+------------+-------+--------+\n// |   0   | 2023-01-01 | 100   | 1000   |\n// |   1   | 2023-01-02 | 105   | 1500   |\n// +-------+------------+-------+--------+\n\n// Colored table output (in supported terminals)\ndf.print({ \n  colorize: true,\n  headerStyle: 'bold',\n  negativeStyle: 'red',\n  positiveStyle: 'green'\n});\n\n// Table with summary statistics at the bottom\ndf.printSummary();\n\n// Table with pagination for large DataFrames\ndf.printPaged(10); // 10 rows per page\n"})}),"\n",(0,i.jsx)(n.h3,{id:"transformations-and-aggregations",children:"Transformations and Aggregations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Chain of transformations and aggregation\nconst result = df\n  .sort('price')           // transformation \u2192 returns a new DataFrame\n  .dropNaN('volume')       // transformation \u2192 returns a new DataFrame\n  .head(10)                // transformation \u2192 returns a new DataFrame\n  .mean('price');          // aggregation \u2192 returns a number\n"})}),"\n",(0,i.jsx)(n.h3,{id:"group-operations",children:"Group Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const grouped = df.groupBy(['sector']).aggregate({\n  price: 'mean',\n  volume: 'sum'\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reshaping-operations",children:"Reshaping Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"df.pivot('date', 'symbol', 'price');\ndf.melt(['date'], ['price', 'volume']);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"working-with-tables",children:"Working with Tables"}),"\n",(0,i.jsx)(n.h4,{id:"joining-tables",children:"Joining Tables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create two DataFrames\nconst customers = DataFrame.create([\n  { customer_id: 1, name: 'John', country: 'USA' },\n  { customer_id: 2, name: 'Alice', country: 'Canada' },\n  { customer_id: 3, name: 'Bob', country: 'UK' }\n]);\n\nconst orders = DataFrame.create([\n  { order_id: 101, customer_id: 1, amount: 200 },\n  { order_id: 102, customer_id: 2, amount: 150 },\n  { order_id: 103, customer_id: 1, amount: 300 },\n  { order_id: 104, customer_id: 3, amount: 250 },\n  { order_id: 105, customer_id: 2, amount: 100 }\n]);\n\n// Inner join\nconst innerJoin = customers.join(orders, 'customer_id');\ninnerJoin.print();\n\n// Left join\nconst leftJoin = customers.join(orders, 'customer_id', { how: 'left' });\nleftJoin.print();\n\n// Calculate total orders per customer\nconst customerOrders = leftJoin\n  .groupBy('customer_id')\n  .aggregate({\n    name: 'first',\n    country: 'first',\n    amount: 'sum'\n  })\n  .rename({ amount: 'total_amount' });\n\ncustomerOrders.print();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"handling-missing-values",children:"Handling Missing Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a DataFrame with missing values\nconst dfWithNaN = DataFrame.create({\n  product: ['Apple', 'Orange', 'Banana', 'Mango', null],\n  price: [1.2, 0.9, 0.5, null, 1.5],\n  quantity: [10, 15, null, 7, 9]\n});\n\n// Check for missing values\nconsole.log(dfWithNaN.isNaN().sum()); // Count NaN values in each column\n\n// Fill missing values\nconst filled = dfWithNaN\n  .fillNaN('product', 'Unknown')  // Fill missing products with 'Unknown'\n  .fillNaN('price', dfWithNaN.mean('price'))  // Fill missing prices with mean\n  .fillNaN('quantity', 0);  // Fill missing quantities with 0\n\nfilled.print();\n\n// Drop rows with any missing values\nconst cleanDf = dfWithNaN.dropNaN();\ncleanDf.print();\n\n// Drop rows with missing values only in specific columns\nconst partialClean = dfWithNaN.dropNaN('price');\npartialClean.print();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"time-series-operations",children:"Time Series Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Create a time series DataFrame\nconst timeSeries = DataFrame.create({\n  date: [\n    '2023-01-01', '2023-01-02', '2023-01-03', \n    '2023-01-04', '2023-01-05', '2023-01-06'\n  ],\n  value: [100, 105, 98, 103, 110, 115]\n});\n\n// Convert string dates to Date objects\nconst tsWithDates = timeSeries.assign({\n  date: row => new Date(row.date)\n});\n\n// Sort by date\nconst sortedTs = tsWithDates.sort('date');\n\n// Calculate rolling average (window of 3)\nconst rollingAvg = sortedTs.rolling('value', 3, 'mean');\nrollingAvg.print();\n\n// Calculate percentage change\nconst pctChange = sortedTs.assign({\n  pct_change: (row, i, df) => {\n    if (i === 0) return 0;\n    const prevValue = df.row(i-1).value;\n    return ((row.value - prevValue) / prevValue) * 100;\n  }\n});\n\npctChange.print();\n\n// Resample daily data to 3-day periods\nconst resampled = sortedTs.resample('date', '3d', {\n  value: 'mean'\n});\n\nresampled.print();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"data-export-and-visualization",children:"Data Export and Visualization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Export to different formats\nconst jsonStr = df.toJSON();\nconst csvStr = df.toCSV();\n\n// Save to file (if in Node.js environment)\ndf.toCSV('data.csv');\ndf.toJSON('data.json');\n\n// Basic visualization\ndf.plot.bar('category', 'value');\ndf.plot.line('date', 'value');\ndf.plot.scatter('x', 'y');\ndf.plot.histogram('value', { bins: 10 });\n\n// More complex visualization with options\ndf.plot.bar('category', 'value', {\n  title: 'Sales by Category',\n  xLabel: 'Product Category',\n  yLabel: 'Sales Amount',\n  color: 'steelblue',\n  width: 800,\n  height: 400\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"future-extensions",children:"Future Extensions"}),"\n",(0,i.jsx)(n.p,{children:"TinyFrameJS plans to include several performance-oriented extensions:"}),"\n",(0,i.jsx)(n.h3,{id:"streamingframe",children:"StreamingFrame"}),"\n",(0,i.jsx)(n.p,{children:"For processing massive datasets that don't fit in memory:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Batch processing of large files"}),"\n",(0,i.jsx)(n.li,{children:"Streaming API for continuous data input"}),"\n",(0,i.jsx)(n.li,{children:"Efficient memory usage for datasets with 10M+ rows"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"lazypipeline",children:"LazyPipeline"}),"\n",(0,i.jsx)(n.p,{children:"For optimized execution of complex transformations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Deferred execution until results are needed"}),"\n",(0,i.jsx)(n.li,{children:"Automatic merging and optimization of operations"}),"\n",(0,i.jsx)(n.li,{children:"Reduction of intermediate memory allocations"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advantages-of-tinyframejs",children:"Advantages of TinyFrameJS"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High Performance"}),": 10-100\xd7 faster than traditional JS objects and arrays"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pure JavaScript"}),": No binary dependencies (no WebAssembly or C++ required)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modular Design"}),": Support for tree-shaking to optimize bundle size"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic Extension"}),": No need for manual method registration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexible API"}),": Methods can be chained together to create complex transformations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"comparison-with-regular-js-code",children:"Comparison with Regular JS Code"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"Regular Arrays & Objects"}),(0,i.jsx)(n.th,{children:"TinyFrameJS"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Complexity"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"for"})," + ",(0,i.jsx)(n.code,{children:"reduce"})]}),(0,i.jsx)(n.td,{children:"Declarative API"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory"}),(0,i.jsx)(n.td,{children:"Sparse objects"}),(0,i.jsxs)(n.td,{children:["Dense ",(0,i.jsx)(n.code,{children:"Float64Array"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Speed"}),(0,i.jsx)(n.td,{children:"~~ slow ~~"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"C-like"})," fast access"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Chaining"}),(0,i.jsx)(n.td,{children:"\u2014"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".sort().head().mean()"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand the basics of DataFrames in TinyFrameJS, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn how to ",(0,i.jsx)(n.a,{href:"./io",children:"read and write tabular data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore more advanced ",(0,i.jsx)(n.a,{href:"./filtering",children:"filtering and selection techniques"})]}),"\n",(0,i.jsxs)(n.li,{children:["Discover how to ",(0,i.jsx)(n.a,{href:"./plotting",children:"create plots from your data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"./derived-columns",children:"derived columns and calculations"})]}),"\n",(0,i.jsxs)(n.li,{children:["View the ",(0,i.jsx)(n.a,{href:"/getting-started/package-overview",children:"complete package overview"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Reference"})," \u2014 detailed description of all methods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benchmark results"})," \u2014 comparison with Pandas, Danfo.js, Arquero"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Roadmap"})," \u2014 StreamingFrame, LazyPipeline and WebAssembly acceleration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);